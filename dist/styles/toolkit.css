@charset "UTF-8";
/* Force the charset
================================================== */
/* Bower Components
================================================== */
/* Compass Mixins */
/*
 * A partial implementation of the Ruby list functions from Compass:
 * https://github.com/Compass/compass/blob/stable/lib/compass/sass_extensions/functions/lists.rb
 */
/*
 * A partial implementation of the Ruby constants functions from Compass:
 * https://github.com/Compass/compass/blob/stable/lib/compass/sass_extensions/functions/constants.rb
 */
/*
 * A partial implementation of the Ruby display functions from Compass:
 * https://github.com/Compass/compass/blob/stable/core/lib/compass/core/sass_extensions/functions/display.rb
 */
/* Breakpoint SASS */
/* EXTRA sub libs dependencies
================================================== */
/* SASS variables, functions, mixins, class and placeholders helpers */
/**
 * BREAKPOINTS for AEGON.nl current website.
 * Approach: Mobile First Method
 */
/**
 * Mobile
 *
 * Example: @include breakpoint($brk-mobile) {}
 * 
 * IMPORTANT: try to avoid the breakpoint below, since the theme is already
 * mobile first and everything need to be written mobile as default.
 */
/**
 * Generic Tablet and upper
 *
 * Example: @include breakpoint($brk-tablet) {}
 */
/**
 * iPad portrait and upper
 *
 * Example: @include breakpoint($brk-ipad-portrait) {}
 */
/**
 * iPad landscape and upper
 *
 * Example: @include breakpoint($brk-ipad-landscape) {}
 */
/**
 * Large desktop and upper
 *
 * Example: @include breakpoint($brk-large-desktop) {}
 */
/**
 * Device Pixel Ratio of at least 1.5 and upper
 *
 * Example: @include breakpoint($brk-hidpi) {}
 */
/**
 * Media print
 *
 * Example: @include breakpoint($brk-print) {}
 */
/**
 * Playground example
 * Note: hide section below to reproduce CSS breakpoints
 */
/**
 * Remove the unit of a length
 * @param {Number} $number - Number to remove unit from
 * @return {Number} - Unitless number
 */
/**
 * Mixin converter for Pixel to REM, plus fallback in pixel for older browser
 * @param  {float}  $property  Name of property
 * @param  {[type]} $values... Top, Right, Bottom, Left pixel values
 * @return {css}    Property converted in REM and fallback
 *
 * Example: @include('padding', .5, .5, .15, .15);
 */
/**
 * Bubble
 * @param  {[type]} $width:            10px          [description]
 * @param  {[type]} $border:           2px           [description]
 * @param  {[type]} $quadrant:         0             [description]
 * @param  {[type]} $top:              ""            [description]
 * @param  {[type]} $right:            ""            [description]
 * @param  {[type]} $bottom:           ""            [description]
 * @param  {[type]} $left:             ""            [description]
 * @param  {[type]} $border-color:     white         [description]
 * @param  {[type]} $background-color: grey          [description]
 * @return {[type]}                    [description]
 */
/**
 * [inlineFrame description]
 * @return {[type]} [description]
 */
/* All library widgets and specific modules */
.bubble:before, .bubble:after {
  content: '';
  display: block;
  position: absolute;
  left: -20px;
  border-color: transparent #edebe5 transparent transparent;
  bottom: 20px;
  width: 0;
  height: 0;
  border-style: solid;
  border-width: 10px;
  border-radius: inherit; }
.bubble:after {
  left: -18px;
  border-color: transparent #ffffff transparent transparent; }

.lhfs_widget .tip {
  background-color: #8cd1e6;
  padding: 20px 15px;
  border-radius: 3px;
  display: none;
  margin-bottom: 18px;
  padding-left: 40px; }
  .lhfs_widget .tip.visible {
    display: block; }
  .lhfs_widget .tip .intro {
    color: #ffffff;
    font-size: 22px;
    font-family: 'senticosansdtregular', Arial, Verdana, sans-serif;
    margin-bottom: 20px; }
    .lhfs_widget .tip .intro:before {
      font-family: 'aegon_icons';
      content: "\e631";
      margin-left: -20px;
      margin-right: -5px;
      left: -10px;
      position: relative; }
.lhfs_widget form > ul, .lhfs_widget ul.products {
  margin: 30px 0;
  width: 100%; }
  .lhfs_widget form > ul li.product .description, .lhfs_widget ul.products li.product .description {
    padding-left: 40px;
    margin-bottom: 20px; }
    .lhfs_widget form > ul li.product .description:before, .lhfs_widget ul.products li.product .description:before {
      font-family: 'aegon_icons';
      color: #3395d3;
      content: "\e605";
      margin-left: -20px;
      left: -10px;
      position: relative; }
  .lhfs_widget form > ul li.product div.title, .lhfs_widget form > ul li.product span.police-number, .lhfs_widget ul.products li.product div.title, .lhfs_widget ul.products li.product span.police-number {
    font-family: 'senticosansdtmedium', Arial, Verdana, sans-serif; }
@media screen and (min-width: 641px) and (max-width: 16000px) {
  .lhfs_widget li.value {
    height: 44px; } }
.lhfs_widget li.value span.content, .lhfs_widget li.value span.help {
  display: inline; }
@media screen and (max-width: 640px) {
  .lhfs_widget li.value span.help {
    display: none; } }
.lhfs_widget li.label {
  min-height: 0; }
  @media screen and (min-width: 641px) and (max-width: 16000px) {
    .lhfs_widget li.label {
      height: inherit; } }
  .lhfs_widget li.label:after {
    content: ":"; }
.lhfs_widget label.left {
  float: left; }
.lhfs_widget input[type=text], .lhfs_widget input[type=email], .lhfs_widget input[type=number], .lhfs_widget select, .lhfs_widget .ddTitle {
  display: none; }
.lhfs_widget .edit ul.error {
  display: block;
  opacity: 0;
  height: 24px;
  min-height: 0; }
  .lhfs_widget .edit ul.error [class*='span'] {
    min-height: 0;
    line-height: 18px; }
  .lhfs_widget .edit ul.error > li {
    color: #C50B1F;
    font-size: 14px;
    margin-left: 0; }
  .lhfs_widget .edit ul.error.visible {
    opacity: 1; }
.lhfs_widget .edit li.label {
  padding-right: 55px; }
  @media screen and (max-width: 640px) {
    .lhfs_widget .edit li.label {
      text-align: left; } }
.lhfs_widget .edit li.label, .lhfs_widget .edit label {
  font-family: 'senticosansdtregular', Arial, Verdana, sans-serif;
  text-align: right; }
  .lhfs_widget .edit li.label:after, .lhfs_widget .edit label:after {
    content: ""; }
.lhfs_widget .edit li.label.required:after, .lhfs_widget .edit label.checkbox.required span.label:after {
  margin-left: 5px;
  content: "*";
  color: #C50B1F; }
.lhfs_widget .edit input[type=text], .lhfs_widget .edit input[type=email], .lhfs_widget .edit input[type=number], .lhfs_widget .edit select, .lhfs_widget .edit .ddTitle {
  display: block; }
.lhfs_widget .edit li.value span.content, .lhfs_widget .edit li.value span.help {
  display: none; }
.lhfs_widget .row-fluid [class*='span'] {
  display: inline; }
  @media screen and (max-width: 640px) {
    .lhfs_widget .row-fluid [class*='span'] {
      min-height: 5px; } }

.lhfs_widget div.payments .status span:before {
  font-family: 'aegon_icons';
  margin-right: 5px; }
.lhfs_widget div.payments .status span.open {
  color: #C50B1F; }
  .lhfs_widget div.payments .status span.open:before {
    content: "\e631"; }
.lhfs_widget div.payments .status span.paid {
  color: #49af57; }
  .lhfs_widget div.payments .status span.paid:before {
    content: "\e632"; }
.lhfs_widget div.payments > ul > li > ul, .lhfs_widget div.payments > ul > li > ul.visible {
  display: table;
  width: 100%;
  border-top: none;
  border-bottom: 1px solid #e0e0e0;
  padding: 10px 15px; }
  .lhfs_widget div.payments > ul > li > ul.header, .lhfs_widget div.payments > ul > li > ul.visible.header {
    background-color: #eeebe5;
    border-top: 1px solid #e0e0e0;
    border-bottom: none; }
    .lhfs_widget div.payments > ul > li > ul.header > li, .lhfs_widget div.payments > ul > li > ul.visible.header > li {
      font-family: 'senticosansdtmedium', Arial, Verdana, sans-serif; }
  .lhfs_widget div.payments > ul > li > ul > li:nth-of-type(1), .lhfs_widget div.payments > ul > li > ul.visible > li:nth-of-type(1) {
    width: 200px; }
  .lhfs_widget div.payments > ul > li > ul > li:nth-of-type(2), .lhfs_widget div.payments > ul > li > ul.visible > li:nth-of-type(2) {
    width: 120px; }
  .lhfs_widget div.payments > ul > li > ul > li:nth-of-type(4), .lhfs_widget div.payments > ul > li > ul.visible > li:nth-of-type(4) {
    width: 120px; }
  .lhfs_widget div.payments > ul > li > ul > li:nth-of-type(5), .lhfs_widget div.payments > ul > li > ul.visible > li:nth-of-type(5) {
    width: 20px; }
.lhfs_widget div.payments .method {
  color: #e0e0e0; }
.lhfs_widget div.payments .details {
  background-color: transparent; }
  .lhfs_widget div.payments .details:before {
    font-family: 'aegon_icons';
    content: "\e62d";
    color: #edebe5;
    background-color: transparent; }
.lhfs_widget div.payments .amount:before {
  content: "â‚¬"; }
.lhfs_widget div.payments .date {
  color: #3395d3; }

.inline_alert {
  padding: 20px 15px;
  border-radius: 3px;
  display: none;
  margin-bottom: 18px;
  display: block;
  border: 1px solid #E6CECD;
  background-color: #f3e7e6; }
  .inline_alert.visible {
    display: block; }
  .inline_alert hr {
    height: 1px;
    color: #E6CECD;
    width: 100%; }
  .inline_alert ul.payments {
    margin: 15px -15px; }
    .inline_alert ul.payments button.white {
      background-color: transparent; }
      .inline_alert ul.payments button.white:before {
        background-color: transparent; }
    .inline_alert ul.payments > li > ul {
      padding: 10px 15px;
      border: 1px solid #E6CECD;
      border-width: 1px 0 0 0;
      width: 100%;
      display: table; }
      .inline_alert ul.payments > li > ul > li {
        float: none; }
        .inline_alert ul.payments > li > ul > li:first-of-type:last-of-type {
          text-align: right; }
        .inline_alert ul.payments > li > ul > li:nth-of-type(2) {
          width: 120px; }
          .inline_alert ul.payments > li > ul > li:nth-of-type(2) span.debit {
            font-family: 'senticosansdtmedium', Arial, Verdana, sans-serif; }
            .inline_alert ul.payments > li > ul > li:nth-of-type(2) span.debit:before {
              content: "â‚¬"; }
        .inline_alert ul.payments > li > ul > li:nth-of-type(3) {
          width: 80px; }
        .inline_alert ul.payments > li > ul > li:nth-of-type(4) {
          width: 120px; }
  .inline_alert h3 {
    color: #1d1d1b;
    font-weight: bold; }

.help {
  margin: 0;
  margin-right: 10px;
  display: inline-block;
  float: right;
  position: relative; }
  .help[title=''] {
    display: none; }
  .help.dialog {
    z-index: 5;
    background-color: #99CAE9;
    display: block;
    position: absolute;
    padding: 18px;
    max-width: 400px;
    border-radius: 3px; }
    .help.dialog:before, .help.dialog:after {
      content: '';
      display: block;
      position: absolute;
      top: -20px;
      border-color: transparent transparent white transparent;
      left: 200px;
      width: 0;
      height: 0;
      border-style: solid;
      border-width: 10px;
      border-radius: inherit; }
    .help.dialog:after {
      top: -18px;
      border-color: transparent transparent #99CAE9 transparent; }
  .help:before {
    font-family: 'aegon_icons';
    font-size: 16px;
    content: "\e62f";
    position: absolute; }

ul.actions {
  text-align: left; }
  ul.actions li {
    float: none;
    display: block; }
    ul.actions li.edit {
      display: none; }
  ul.actions.edit {
    text-align: right; }
    ul.actions.edit li {
      text-align: left; }
      ul.actions.edit li.edit {
        padding-left: 0;
        display: block; }
        ul.actions.edit li.edit div.disabler {
          z-index: 2;
          position: relative;
          left: 0;
          top: -38px;
          background-color: white;
          opacity: 0.5;
          width: 100%;
          height: 38px;
          display: block; }
      ul.actions.edit li.view {
        display: none; }
      ul.actions.edit li button {
        position: relative;
        z-index: 3; }
        ul.actions.edit li button.disabled {
          z-index: 1; }

li.right {
  text-align: right; }

ul.horizontal {
  display: table;
  margin: 0;
  padding: 1px 0;
  display: none; }
  ul.horizontal.row-fluid {
    height: 50px; }
  @media screen and (max-width: 640px) {
    ul.horizontal {
      margin-bottom: 30px; } }
  ul.horizontal.clear {
    width: 100%;
    height: 1px;
    margin: 0 0 -1px;
    clear: both; }
  ul.horizontal.visible {
    display: block; }
  ul.horizontal li {
    display: table-cell; }
    ul.horizontal li.label {
      font-family: 'senticosansdtregular', Arial, Verdana, sans-serif; }
    ul.horizontal li.value {
      font-family: 'senticosansdtlight', Arial, Verdana, sans-serif; }

/**
 * Added by Rocco: Please check the explanation wrote in layout/_grid.scss at 
 * line 100, related to this specific declaration below, that helps to visuaize 
 * your widget in the right way.
 */
.lhfs_widget .product.data.span12, .lhfs_widget .row-fluid li.value[class*='span'] {
  margin-left: 0; }

.personal_details_widget ul.horizontal {
  display: block; }
@media screen and (min-width: 641px) and (max-width: 16000px) {
  .personal_details_widget li.value {
    line-height: 100%;
    min-height: 44px; } }
.personal_details_widget li.value span.content, .personal_details_widget li.value span.help {
  display: inline; }
@media screen and (max-width: 640px) {
  .personal_details_widget li.value span.help {
    display: none; } }
.personal_details_widget li.label {
  min-height: 0; }
  .personal_details_widget li.label:after {
    content: ":"; }
.personal_details_widget label.left {
  float: left; }
.personal_details_widget .edit ul.error {
  display: block;
  opacity: 0;
  height: 24px;
  min-height: 0; }
  .personal_details_widget .edit ul.error [class*='span'] {
    min-height: 0;
    line-height: 18px; }
  .personal_details_widget .edit ul.error > li {
    color: #C50B1F;
    font-size: 14px;
    margin-left: 0; }
  .personal_details_widget .edit ul.error.visible {
    opacity: 1; }
.personal_details_widget .edit li.label {
  text-align: right; }
  @media screen and (max-width: 640px) {
    .personal_details_widget .edit li.label {
      text-align: left; } }
.personal_details_widget .edit li.label, .personal_details_widget .edit label {
  font-family: 'senticosansdtregular', Arial, Verdana, sans-serif; }
  .personal_details_widget .edit li.label:after, .personal_details_widget .edit label:after {
    content: ""; }
.personal_details_widget .edit li.label.required:after, .personal_details_widget .edit label.checkbox.required span.label:after {
  margin-left: 5px;
  content: "*";
  color: #C50B1F; }
.personal_details_widget ul.horizontal.row-fluid {
  height: auto;
  margin-bottom: 20px; }
.personal_details_widget .row-fluid [class*='span'] {
  display: inline; }
  @media screen and (max-width: 640px) {
    .personal_details_widget .row-fluid [class*='span'] {
      min-height: 5px; } }
.personal_details_widget .NL, .personal_details_widget .world {
  display: none; }
  .personal_details_widget .NL.visible, .personal_details_widget .world.visible {
    display: block; }
.personal_details_widget .residential_address {
  bottom-margin: 40px; }

.contract_overview_widget ul {
  padding: 0; }
  .contract_overview_widget ul li {
    padding: 2px 0; }
    .contract_overview_widget ul li.category {
      border-bottom: 1px solid #aaa;
      padding: 30px 10px;
      padding: 1.875rem 0.625rem;
      margin: 10px 10px;
      margin: 0.625rem 0.625rem; }
      .contract_overview_widget ul li.category:first-child {
        border-top: 1px solid #aaa; }
      .contract_overview_widget ul li.category:last-child {
        border-bottom: none; }
    .contract_overview_widget ul li.arrow {
      margin: 0;
      background-repeat: no-repeat;
      background-color: transparent;
      background-position: 2px center;
      padding-left: 18px; }
      .contract_overview_widget ul li.arrow:before {
        display: none; }
  .contract_overview_widget ul.horizontal {
    display: block;
    width: 100%;
    margin-bottom: 0;
    padding: 6px 0; }
    .contract_overview_widget ul.horizontal li {
      float: none;
      display: block;
      vertical-align: top;
      padding: 2px 19px;
      padding: 0.125rem 1.1875rem; }
      .contract_overview_widget ul.horizontal li:first-child {
        width: 100%; }
    .contract_overview_widget ul.horizontal.type {
      margin-bottom: 30px; }
  .contract_overview_widget ul.horizontal.header {
    display: none; }
.contract_overview_widget .label {
  color: #3395d3;
  font-weight: bold; }
.contract_overview_widget .value:not(.title) {
  font-family: 'senticosansdtregular', Arial, Verdana, sans-serif; }
.contract_overview_widget .product.title {
  display: none; }
.contract_overview_widget .value.title {
  display: none; }
.contract_overview_widget .messages {
  margin: 10px 10px 35px;
  margin: 0.625rem 0.625rem 2.1875rem; }
.contract_overview_widget h2 {
  position: relative; }
  .contract_overview_widget h2[class*="icon-"]:before {
    position: absolute;
    top: 50%;
    left: 0;
    margin-left: -40px;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
    font-size: 25px;
    font-weight: normal;
    -webkit-font-smoothing: antialiased; }

@media only screen and (min-width: 641px) {
  .contract_overview_widget ul.horizontal {
    width: 100%;
    padding: 0; }
    .contract_overview_widget ul.horizontal li {
      display: inline-block;
      padding: 8px 19px;
      padding: 0.5rem 1.1875rem; }
      .contract_overview_widget ul.horizontal li:first-child {
        width: 60%; }
  .contract_overview_widget ul.horizontal.header {
    display: block; }
    .contract_overview_widget ul.horizontal.header li {
      padding: 2px 19px;
      padding: 0.125rem 1.1875rem; }
      .contract_overview_widget ul.horizontal.header li:first-child {
        padding-left: 0; }
  .contract_overview_widget ul li {
    padding: 8px 0px;
    padding: 0.5rem 0rem; }
    .contract_overview_widget ul li span.value {
      padding: 0; }
  .contract_overview_widget .product.title {
    display: block;
    padding: 10px 0;
    font-weight: normal; }
  .contract_overview_widget .value.title {
    display: block;
    padding: 10px 0;
    font-weight: normal; } }

.my_documents_widget article {
  margin: 0px 0px;
  margin: 0rem 0rem;
  border-bottom-style: solid;
  border-bottom-color: #e0e0e0;
  border-bottom-width: 1px;
  border-bottom-width: 0.0625rem; }
  .my_documents_widget article:first-of-type {
    margin-top: 30px;
    margin-top: 1.875rem;
    border-top-style: solid;
    border-top-color: #e0e0e0;
    border-top-width: 1px;
    border-top-width: 0.0625rem; }
  .my_documents_widget article:last-of-type {
    border-bottom-style: none; }
  .my_documents_widget article > dl {
    display: block;
    padding: 0px 20px;
    padding: 0rem 1.25rem;
    overflow: hidden;
    transition: max-height .2s ease;
    margin: 0;
    max-height: 0; }
  .my_documents_widget article.open > dl {
    height: 100%;
    max-height: 1000em;
    transition: max-height 2s ease-in; }
  .my_documents_widget article.open h2:after {
    -webkit-transform: rotate(-90deg);
    -ms-transform: rotate(-90deg);
    transform: rotate(-90deg); }
.my_documents_widget h2 {
  position: relative;
  font-size: 30px;
  font-size: 1.875rem;
  margin: 0px;
  margin: 0rem;
  padding: 20px 0px 20px 15px;
  padding: 1.25rem 0rem 1.25rem 0.9375rem;
  line-height: 60px;
  line-height: 3.75rem;
  font-weight: bold;
  cursor: pointer;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none; }
  .my_documents_widget h2:before {
    display: inline-block;
    font-size: 25px;
    font-size: 1.5625rem;
    margin: 0px 20px 0px 0px;
    margin: 0rem 1.25rem 0rem 0rem;
    font-weight: normal;
    -webkit-font-smoothing: antialiased; }
  .my_documents_widget h2:after {
    display: inline-block;
    font-size: 15px;
    font-size: 0.9375rem;
    position: absolute;
    right: 0;
    margin-right: 30px;
    margin-right: 1.875rem;
    font-family: 'aegon_icons';
    content: '\e600';
    font-weight: normal;
    -webkit-font-smoothing: antialiased;
    transition: -webkit-transform .2s ease;
    transition: transform .2s ease;
    -webkit-transform: rotate(90deg);
    -ms-transform: rotate(90deg);
    transform: rotate(90deg); }
.my_documents_widget dl.row-fluid > dt {
  display: none; }
.my_documents_widget dl.row-fluid dd:first-child a {
  font-family: 'senticosansdtregular', Arial, Verdana, sans-serif; }
  .my_documents_widget dl.row-fluid dd:first-child a:before {
    display: inline;
    font-size: 10px;
    font-size: 0.625rem;
    line-height: inherit;
    vertical-align: middle; }
.my_documents_widget .icon-pdf:before {
  font-size: 25px;
  font-size: 1.5625rem; }

@media only screen and (min-width: 641px) {
  .my_documents_widget article {
    margin: 30px 0px;
    margin: 1.875rem 0rem; }
    .my_documents_widget article:first-of-type {
      margin-top: 0;
      border-top: none; }
    .my_documents_widget article > dl {
      display: block;
      max-height: inherit;
      padding: 10px 0px;
      padding: 0.625rem 0rem; }
  .my_documents_widget h2 {
    font-size: 40px;
    font-size: 2.5rem;
    padding: 0px 0px;
    padding: 0rem 0rem;
    margin: 5px 0px 20px 0px;
    margin: 0.3125rem 0rem 1.25rem 0rem;
    line-height: 40px;
    line-height: 2.5rem;
    font-weight: normal;
    cursor: default; }
    .my_documents_widget h2:before {
      position: absolute;
      top: 50%;
      left: 0;
      -webkit-transform: translateY(-50%);
      -ms-transform: translateY(-50%);
      transform: translateY(-50%);
      margin: 0px 0px 0px -40px;
      margin: 0rem 0rem 0rem -2.5rem; }
    .my_documents_widget h2:after {
      display: none; }
  .my_documents_widget dl.row-fluid > dt {
    display: block;
    font-size: 17px;
    font-size: 1.0625rem; }
  .my_documents_widget dl.row-fluid dd:first-child a:before {
    padding-right: 10px;
    padding-right: 0.625rem; } }

.communication_preferences dl.table.row-fluid > dt {
  position: relative;
  display: block;
  min-width: 100%;
  font-family: 'senticosansdtregular', Arial, Verdana, sans-serif;
  padding-right: 22px;
  padding-right: 1.375rem; }
.communication_preferences dl.table.row-fluid > dd {
  display: block;
  margin-left: 0; }
.communication_preferences span.icon-questionmark {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  cursor: default;
  font-family: 'aegon_icons';
  font-size: 16px;
  font-size: 1rem;
  color: #00304c; }
.communication_preferences span[tooltip] {
  display: block;
  position: absolute;
  top: 0;
  right: 0;
  width: 20px;
  width: 1.25rem;
  text-align: center; }
  .communication_preferences span[tooltip]:before {
    visibility: hidden;
    opacity: 0;
    position: absolute;
    top: 15px;
    top: 0.9375rem;
    left: 0%;
    display: block;
    width: 0;
    height: 0;
    content: '';
    border-style: solid;
    border-width: 10px;
    border-width: 0.625rem;
    border-color: transparent transparent #99CAE9 transparent;
    transition: .1s all .3s; }
  .communication_preferences span[tooltip]:after {
    visibility: hidden;
    opacity: 0;
    position: absolute;
    top: 33px;
    top: 2.0625rem;
    right: -10px;
    right: -0.625rem;
    font-family: 'senticosansdtlight', Arial, Verdana, sans-serif;
    content: attr(tooltip);
    font-size: 14px;
    color: #1d1d1b;
    text-align: left;
    padding: 12px;
    padding: 0.75rem;
    display: block;
    width: 300px;
    z-index: 5;
    background-color: #99CAE9;
    border-radius: 3px;
    border-radius: 0.1875rem;
    transition: .1s all .3s; }
  .communication_preferences span[tooltip]:hover:before, .communication_preferences span[tooltip]:hover:after {
    visibility: visible;
    opacity: 1;
    transition: .1s all 0s; }
.communication_preferences label.checkbox {
  display: block;
  margin-bottom: 10px;
  margin-bottom: 0.625rem; }
  .communication_preferences label.checkbox > input[type='checkbox'] + span.checkbox {
    top: 0;
    left: 0; }
.communication_preferences button.edit.right {
  line-height: inherit; }

@media only screen and (min-width: 641px) {
  .communication_preferences dl.table.row-fluid > dt, .communication_preferences dl.table.row-fluid > dd {
    display: table-cell;
    min-width: inherit; }
    .communication_preferences dl.table.row-fluid > dt.top span[tooltip], .communication_preferences dl.table.row-fluid > dd.top span[tooltip] {
      top: 0;
      margin-top: 0; }
  .communication_preferences dl.table.row-fluid > dd {
    padding-left: 16px;
    padding-left: 1rem; }
  .communication_preferences span[tooltip] {
    top: 50%;
    margin-top: -12.5px;
    margin-top: -0.78125rem; }
    .communication_preferences span[tooltip]:before {
      top: 15px;
      left: 0%; }
    .communication_preferences span[tooltip]:after {
      left: -150px;
      top: 33px; } }

/* All library widgets and specific modules */
.user_detail_widget {
  display: none;
  float: right;
  z-index: 0;
  /**
   * End animation with jQuery support
   */ }
  .user_detail_widget .inplace {
    position: relative;
    display: inline-block;
    float: right;
    margin: 0;
    height: 36px; }
    .user_detail_widget .inplace .btn-login-loggedin {
      z-index: 2;
      position: relative;
      top: 0px;
      right: 0px; }
  .user_detail_widget > .text {
    display: none; }
  .user_detail_widget label {
    font-weight: normal; }
  .user_detail_widget input#UDW_dd_show {
    display: none; }
    .user_detail_widget input#UDW_dd_show:checked ~ .dropdown {
      display: block; }
    .user_detail_widget input#UDW_dd_show:checked ~ .btn-login-loggedin:after {
      -webkit-transform: rotate(180deg);
      -ms-transform: rotate(180deg);
      transform: rotate(180deg); }
  .user_detail_widget .dropdown {
    display: none;
    z-index: 1;
    position: absolute;
    top: auto;
    right: 0;
    margin-top: -1px;
    margin-top: -0.0625rem;
    width: 280px;
    width: 17.5rem;
    border-radius: 2px;
    border-radius: 0.125rem;
    background-color: #ffffff;
    border: 1px solid #e0e0e0;
    box-shadow: 0 1px 0px rgba(0, 0, 0, 0.3); }
    .user_detail_widget .dropdown .text {
      text-align: left;
      white-space: normal;
      text-overflow: initial;
      overflow: initial; }
      .user_detail_widget .dropdown .text p {
        display: block;
        padding: 0px 12px;
        padding: 0rem 0.75rem;
        margin: 18px 0px;
        margin: 1.125rem 0rem; }
      .user_detail_widget .dropdown .text p.name {
        padding: 0px 20px;
        padding: 0rem 1.25rem;
        white-space: nowrap;
        color: #49af57; }
        .user_detail_widget .dropdown .text p.name:before {
          content: "\e636";
          font-family: 'aegon_icons';
          display: inline-block;
          font-size: 23px;
          font-size: 1.4375rem;
          margin-right: 12px;
          margin-right: 0.75rem;
          -webkit-transform: translateY(3px);
          -ms-transform: translateY(3px);
          transform: translateY(3px); }
      .user_detail_widget .dropdown .text .action {
        padding: 0px 12px;
        padding: 0rem 0.75rem;
        white-space: nowrap; }
  .user_detail_widget .highlight {
    display: block;
    background-color: #49af57; }
    .user_detail_widget .highlight.has-been-shown.desktop, .user_detail_widget .highlight.has-been-shown.mobile {
      display: none; }
    .user_detail_widget .highlight.desktop {
      display: none;
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      z-index: 0;
      padding: 23px 0px;
      padding: 1.4375rem 0rem;
      -webkit-animation: slidingHighlightOnTop 1s 1 3s forwards;
      animation: slidingHighlightOnTop 1s 1 3s forwards; }
    .user_detail_widget .highlight.mobile {
      font-size: 16px;
      font-size: 1rem;
      margin: 0px 12px;
      margin: 0rem 0.75rem;
      overflow: hidden;
      background-color: transparent;
      -webkit-animation: slidingHighlightOnTopMobile 1s 1 3s forwards;
      animation: slidingHighlightOnTopMobile 1s 1 3s forwards;
      max-height: 500px; }
      .user_detail_widget .highlight.mobile .text {
        padding: 0;
        background-color: #49af57; }
        .user_detail_widget .highlight.mobile .text p {
          padding: 12px;
          padding: 0.75rem;
          margin-bottom: 0;
          color: #ffffff; }
    .user_detail_widget .highlight strong {
      font-family: 'senticosansdtregular', Arial, Verdana, sans-serif;
      font-weight: 300; }
  .user_detail_widget .btn-login-loggedin {
    padding: 0px 10px 1px 10px;
    padding: 0rem 0.625rem 0.0625rem 0.625rem;
    line-height: 36px;
    line-height: 2.25rem;
    height: auto;
    padding-bottom: 6px;
    cursor: pointer;
    border-radius: 2px;
    border-radius: 0.125rem;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    outline: 0;
    font-family: 'senticosansdtregular', Arial, Verdana, sans-serif;
    font-size: 16px;
    font-size: 1rem;
    background-color: #ffffff;
    border-width: 1px;
    border-style: solid;
    border-color: #e0e0e0;
    border-bottom-color: transparent;
    color: #49af57; }
    .user_detail_widget .btn-login-loggedin:after {
      font-family: 'aegon_icons';
      font-size: 12px;
      font-size: 0.75rem;
      content: "\e630";
      margin-left: 6px;
      margin-left: 0.375rem; }
    .user_detail_widget .btn-login-loggedin.tap {
      border-bottom-color: #e0e0e0;
      padding-bottom: 0; }
      .user_detail_widget .btn-login-loggedin.tap ~ .dropdown {
        display: none; }
    .user_detail_widget .btn-login-loggedin.off, .user_detail_widget .btn-login-loggedin.off:after {
      -webkit-animation: none;
      animation: none;
      background-color: #ffffff; }
    .user_detail_widget .btn-login-loggedin:hover {
      opacity: initial; }
  .user_detail_widget.processed .highlight.desktop {
    display: none; }
  .user_detail_widget.processed .highlight.mobile {
    display: none; }
  .user_detail_widget.processed > .text {
    opacity: 1; }
  .user_detail_widget.processed .btn-login-loggedin, .user_detail_widget.processed .btn-login-loggedin:after {
    -webkit-animation: none;
    animation: none; }

html.lt-ie9 .user_detail_widget > .text {
  opacity: 1 !important; }

body.section-mijnaegon .myaegon {
  display: none; }

body.shw-widgets-logged-in header.header .login-link-wrapper, body.shw-widgets-logged-in .link-logged-in a {
  display: none; }
body.shw-widgets-logged-in .user_detail_widget, body.shw-widgets-logged-in .link-logged-in .link-alternative a {
  display: block; }

.link-alternative a {
  display: none; }

@media only screen and (min-width: 641px) {
  .user_detail_widget > .text {
    line-height: 44px;
    line-height: 2.75rem; }
  .user_detail_widget .text p.name {
    display: inline;
    padding: 0px 25px 0px 0px;
    padding: 0rem 1.5625rem 0rem 0rem;
    color: #49af57; }
  .user_detail_widget .dropdown {
    display: none; }
    .user_detail_widget .dropdown .text p.name {
      display: none; }
  .user_detail_widget .highlight.desktop {
    display: block; }
    .user_detail_widget .highlight.desktop .text {
      margin: 0;
      text-align: left;
      line-height: 44px;
      line-height: 2.75rem;
      padding-right: 170px;
      padding-right: 10.625rem;
      margin-left: 7.3%;
      margin-right: 7.3%;
      white-space: nowrap;
      text-overflow: ellipsis;
      overflow: hidden;
      color: #ffffff; }
      .user_detail_widget .highlight.desktop .text .welcome {
        font-family: 'senticosansdtregular', Arial, Verdana, sans-serif; }
      .user_detail_widget .highlight.desktop .text p {
        display: inline; }
  .user_detail_widget .highlight.mobile {
    display: none; }
  .user_detail_widget .btn-login-loggedin {
    display: inline-block;
    padding: 0px 13px 2px 13px;
    padding: 0rem 0.8125rem 0.125rem 0.8125rem;
    line-height: 36px;
    line-height: 2.25rem;
    font-size: inherit;
    background-color: transparent;
    border-bottom-color: #e0e0e0;
    -webkit-animation: buttonLoginToDefault 4s normal 0s forwards;
    animation: buttonLoginToDefault 4s normal 0s forwards; }
    .user_detail_widget .btn-login-loggedin:before {
      content: '\e636';
      font-family: 'aegon_icons';
      display: inline-block;
      font-size: 23px;
      font-size: 1.4375rem;
      margin-right: 12px;
      margin-right: 0.75rem;
      -webkit-transform: translateY(3px);
      -ms-transform: translateY(3px);
      transform: translateY(3px); }
    .user_detail_widget .btn-login-loggedin:after {
      display: inline-block;
      -webkit-animation: buttonAfterLoginToDefault 4s normal 0s forwards;
      animation: buttonAfterLoginToDefault 4s normal 0s forwards; }
    .user_detail_widget .btn-login-loggedin.tap {
      background-color: #ffffff;
      border-bottom-color: transparent;
      padding-bottom: 0px; }
      .user_detail_widget .btn-login-loggedin.tap ~ .dropdown {
        display: block; }
    .user_detail_widget .btn-login-loggedin.ieChangeColors {
      color: #ffffff; }
      .user_detail_widget .btn-login-loggedin.ieChangeColors:after {
        border-color: #ffffff; } }

@media only screen and (min-width: 901px) {
  .user_detail_widget > .text {
    float: left;
    display: inline-block;
    opacity: 1;
    transition: opacity .15s; } }

@-webkit-keyframes buttonLoginToDefault {
  0%, 75% {
    border-color: #ffffff;
    color: #ffffff; }

  100% {
    border-color: #e0e0e0;
    color: #49af57; } }

@keyframes buttonLoginToDefault {
  0%, 75% {
    border-color: #ffffff;
    color: #ffffff; }

  100% {
    border-color: #e0e0e0;
    color: #49af57; } }

@-webkit-keyframes buttonAfterLoginToDefault {
  0%, 75% {
    border-color: #ffffff; }

  100% {
    border-color: #49af57; } }

@keyframes buttonAfterLoginToDefault {
  0%, 75% {
    border-color: #ffffff; }

  100% {
    border-color: #49af57; } }

@-webkit-keyframes slidingHighlightOnTop {
  from {
    -webkit-transform: translateY(0%);
    transform: translateY(0%); }

  to {
    -webkit-transform: translateY(-120%);
    transform: translateY(-120%); } }

@keyframes slidingHighlightOnTop {
  from {
    -webkit-transform: translateY(0%);
    transform: translateY(0%); }

  to {
    -webkit-transform: translateY(-120%);
    transform: translateY(-120%); } }

@-webkit-keyframes slidingHighlightOnTopMobile {
  from {
    max-height: 500px; }

  to {
    max-height: 0px; } }

@keyframes slidingHighlightOnTopMobile {
  from {
    max-height: 500px; }

  to {
    max-height: 0px; } }

.hide-if-shw-loggedout {
  display: none; }

.shw-widgets-logged-in .show-if-shw-loggedin, .shw-widgets-logged-in .hide-if-shw-loggedout {
  display: inline; }
  .shw-widgets-logged-in .show-if-shw-loggedin.inline, .shw-widgets-logged-in .hide-if-shw-loggedout.inline {
    display: inline; }
  .shw-widgets-logged-in .show-if-shw-loggedin.inline-block, .shw-widgets-logged-in .hide-if-shw-loggedout.inline-block {
    display: inline-block; }
  .shw-widgets-logged-in .show-if-shw-loggedin.block, .shw-widgets-logged-in .hide-if-shw-loggedout.block {
    display: block; }
.shw-widgets-logged-in .hide-if-shw-loggedin {
  display: none; }

/* Groups of toolkit core files
================================================== */
.sliding-popup-top {
  display: none; }


<<<<<<< HEAD
/*# sourceMappingURL=data:application/json;base64, */
=======
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvb2xraXQuY3NzIiwiLi4vLi4vLi4vbGliL2FlZ29uLXNhc3MtbGlicmFyeS9oZWxwZXJzL19taXhpbnMuc2NzcyIsIi4uLy4uLy4uL2xpYi9hZWdvbi1zYXNzLWxpYnJhcnkvd2lkZ2V0cy9fbGhmcy5zY3NzIiwiLi4vLi4vLi4vbGliL2FlZ29uLXNhc3MtbGlicmFyeS9oZWxwZXJzL192YXJpYWJsZXMuc2NzcyIsIi4uLy4uLy4uL2xpYi9hZWdvbi1zYXNzLWxpYnJhcnkvd2lkZ2V0cy9fcGVyc29uYWxfZGV0YWlscy5zY3NzIiwiLi4vLi4vLi4vbGliL2FlZ29uLXNhc3MtbGlicmFyeS93aWRnZXRzL19jb250cmFjdF9vdmVydmlldy5zY3NzIiwiLi4vLi4vLi4vbGliL2FlZ29uLXNhc3MtbGlicmFyeS93aWRnZXRzL19teV9kb2N1bWVudHMuc2NzcyIsIi4uLy4uLy4uL2xpYi9hZWdvbi1zYXNzLWxpYnJhcnkvd2lkZ2V0cy9fY29tbXVuaWNhdGlvbl9wcmVmZXJlbmNlcy5zY3NzIiwiLi4vLi4vLi4vbGliL2FlZ29uLXNhc3MtbGlicmFyeS9zdHJ1Y3R1cmVzL191c2VyX2RldGFpbC5zY3NzIiwiLi4vLi4vLi4vbGliL2FlZ29uLXNhc3MtbGlicmFyeS9zdHJ1Y3R1cmVzL19leHRyYV9mZWF0dXJlcy5zY3NzIiwicGFydGlhbHMvX2Jhc2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQkFBaUI7QUFDakI7c0RBQ3FEO0FBQ3JEO3NEQUNxRDtBQUNyRCxxQkFBb0I7QUFDcEI7OztJQUdHO0FBQ0g7OztJQUdHO0FBQ0g7OztJQUdHO0FBQ0gsc0JBQXFCO0FBQ3JCO3NEQUNxRDtBQUNyRCx3RUFBdUU7QUFDdkU7OztJQUdHO0FBQ0g7Ozs7Ozs7SUFPRztBQUNIOzs7O0lBSUc7QUFDSDs7OztJQUlHO0FBQ0g7Ozs7SUFJRztBQUNIOzs7O0lBSUc7QUFDSDs7OztJQUlHO0FBQ0g7Ozs7SUFJRztBQUNIOzs7SUFHRztBQUNIOzs7O0lB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QUFFbEI7RVM5L0J1QixpQkFBMkUsRUFBQTtFVGdnQ2hHO0lTNS9Cc0csaUJBQUEsRUFBQTtFVDgvQnRHO0lTMS9CK0YsdUJBQUEsRUFBQTtFVDQvQi9GO0lTdC9CcUIsZ0JBQUEsRUFBQTtBVHcvQnZCO0VBQ0UsZUFBYyxFQUFFOztBQUVsQjtzRFU1aENBO0FWOGhDQTtFQUNFLGVBQWMsRUFBRSIsImZpbGUiOiJ0b29sa2l0LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIkBjaGFyc2V0IFwiVVRGLThcIjtcbi8qIEZvcmNlIHRoZSBjaGFyc2V0XG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyogQm93ZXIgQ29tcG9uZW50c1xuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qIENvbXBhc3MgTWl4aW5zICovXG4vKlxuICogQSBwYXJ0aWFsIGltcGxlbWVudGF0aW9uIG9mIHRoZSBSdWJ5IGxpc3QgZnVuY3Rpb25zIGZyb20gQ29tcGFzczpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Db21wYXNzL2NvbXBhc3MvYmxvYi9zdGFibGUvbGliL2NvbXBhc3Mvc2Fzc19leHRlbnNpb25zL2Z1bmN0aW9ucy9saXN0cy5yYlxuICovXG4vKlxuICogQSBwYXJ0aWFsIGltcGxlbWVudGF0aW9uIG9mIHRoZSBSdWJ5IGNvbnN0YW50cyBmdW5jdGlvbnMgZnJvbSBDb21wYXNzOlxuICogaHR0cHM6Ly9naXRodWIuY29tL0NvbXBhc3MvY29tcGFzcy9ibG9iL3N0YWJsZS9saWIvY29tcGFzcy9zYXNzX2V4dGVuc2lvbnMvZnVuY3Rpb25zL2NvbnN0YW50cy5yYlxuICovXG4vKlxuICogQSBwYXJ0aWFsIGltcGxlbWVudGF0aW9uIG9mIHRoZSBSdWJ5IGRpc3BsYXkgZnVuY3Rpb25zIGZyb20gQ29tcGFzczpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Db21wYXNzL2NvbXBhc3MvYmxvYi9zdGFibGUvY29yZS9saWIvY29tcGFzcy9jb3JlL3Nhc3NfZXh0ZW5zaW9ucy9mdW5jdGlvbnMvZGlzcGxheS5yYlxuICovXG4vKiBCcmVha3BvaW50IFNBU1MgKi9cbi8qIEVYVFJBIHN1YiBsaWJzIGRlcGVuZGVuY2llc1xuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qIFNBU1MgdmFyaWFibGVzLCBmdW5jdGlvbnMsIG1peGlucywgY2xhc3MgYW5kIHBsYWNlaG9sZGVycyBoZWxwZXJzICovXG4vKipcbiAqIEJSRUFLUE9JTlRTIGZvciBBRUdPTi5ubCBjdXJyZW50IHdlYnNpdGUuXG4gKiBBcHByb2FjaDogTW9iaWxlIEZpcnN0IE1ldGhvZFxuICovXG4vKipcbiAqIE1vYmlsZVxuICpcbiAqIEV4YW1wbGU6IEBpbmNsdWRlIGJyZWFrcG9pbnQoJGJyay1tb2JpbGUpIHt9XG4gKiBcbiAqIElNUE9SVEFOVDogdHJ5IHRvIGF2b2lkIHRoZSBicmVha3BvaW50IGJlbG93LCBzaW5jZSB0aGUgdGhlbWUgaXMgYWxyZWFkeVxuICogbW9iaWxlIGZpcnN0IGFuZCBldmVyeXRoaW5nIG5lZWQgdG8gYmUgd3JpdHRlbiBtb2JpbGUgYXMgZGVmYXVsdC5cbiAqL1xuLyoqXG4gKiBHZW5lcmljIFRhYmxldCBhbmQgdXBwZXJcbiAqXG4gKiBFeGFtcGxlOiBAaW5jbHVkZSBicmVha3BvaW50KCRicmstdGFibGV0KSB7fVxuICovXG4vKipcbiAqIGlQYWQgcG9ydHJhaXQgYW5kIHVwcGVyXG4gKlxuICogRXhhbXBsZTogQGluY2x1ZGUgYnJlYWtwb2ludCgkYnJrLWlwYWQtcG9ydHJhaXQpIHt9XG4gKi9cbi8qKlxuICogaVBhZCBsYW5kc2NhcGUgYW5kIHVwcGVyXG4gKlxuICogRXhhbXBsZTogQGluY2x1ZGUgYnJlYWtwb2ludCgkYnJrLWlwYWQtbGFuZHNjYXBlKSB7fVxuICovXG4vKipcbiAqIExhcmdlIGRlc2t0b3AgYW5kIHVwcGVyXG4gKlxuICogRXhhbXBsZTogQGluY2x1ZGUgYnJlYWtwb2ludCgkYnJrLWxhcmdlLWRlc2t0b3ApIHt9XG4gKi9cbi8qKlxuICogRGV2aWNlIFBpeGVsIFJhdGlvIG9mIGF0IGxlYXN0IDEuNSBhbmQgdXBwZXJcbiAqXG4gKiBFeGFtcGxlOiBAaW5jbHVkZSBicmVha3BvaW50KCRicmstaGlkcGkpIHt9XG4gKi9cbi8qKlxuICogTWVkaWEgcHJpbnRcbiAqXG4gKiBFeGFtcGxlOiBAaW5jbHVkZSBicmVha3BvaW50KCRicmstcHJpbnQpIHt9XG4gKi9cbi8qKlxuICogUGxheWdyb3VuZCBleGFtcGxlXG4gKiBOb3RlOiBoaWRlIHNlY3Rpb24gYmVsb3cgdG8gcmVwcm9kdWNlIENTUyBicmVha3BvaW50c1xuICovXG4vKipcbiAqIFJlbW92ZSB0aGUgdW5pdCBvZiBhIGxlbmd0aFxuICogQHBhcmFtIHtOdW1iZXJ9ICRudW1iZXIgLSBOdW1iZXIgdG8gcmVtb3ZlIHVuaXQgZnJvbVxuICogQHJldHVybiB7TnVtYmVyfSAtIFVuaXRsZXNzIG51bWJlclxuICovXG4vKipcbiAqIE1peGluIGNvbnZlcnRlciBmb3IgUGl4ZWwgdG8gUkVNLCBwbHVzIGZhbGxiYWNrIGluIHBpeGVsIGZvciBvbGRlciBicm93c2VyXG4gKiBAcGFyYW0gIHtmbG9hdH0gICRwcm9wZXJ0eSAgTmFtZSBvZiBwcm9wZXJ0eVxuICogQHBhcmFtICB7W3R5cGVdfSAkdmFsdWVzLi4uIFRvcCwgUmlnaHQsIEJvdHRvbSwgTGVmdCBwaXhlbCB2YWx1ZXNcbiAqIEByZXR1cm4ge2Nzc30gICAgUHJvcGVydHkgY29udmVydGVkIGluIFJFTSBhbmQgZmFsbGJhY2tcbiAqXG4gKiBFeGFtcGxlOiBAaW5jbHVkZSgncGFkZGluZycsIC41LCAuNSwgLjE1LCAuMTUpO1xuICovXG4vKipcbiAqIEJ1YmJsZVxuICogQHBhcmFtICB7W3R5cGVdfSAkd2lkdGg6ICAgICAgICAgICAgMTBweCAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtbdHlwZV19ICRib3JkZXI6ICAgICAgICAgICAycHggICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge1t0eXBlXX0gJHF1YWRyYW50OiAgICAgICAgIDAgICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7W3R5cGVdfSAkdG9wOiAgICAgICAgICAgICAgXCJcIiAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge1t0eXBlXX0gJHJpZ2h0OiAgICAgICAgICAgIFwiXCIgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtbdHlwZV19ICRib3R0b206ICAgICAgICAgICBcIlwiICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7W3R5cGVdfSAkbGVmdDogICAgICAgICAgICAgXCJcIiAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge1t0eXBlXX0gJGJvcmRlci1jb2xvcjogICAgIHdoaXRlICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7W3R5cGVdfSAkYmFja2dyb3VuZC1jb2xvcjogZ3JleSAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gKiBAcmV0dXJuIHtbdHlwZV19ICAgICAgICAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gKi9cbi8qKlxuICogW2lubGluZUZyYW1lIGRlc2NyaXB0aW9uXVxuICogQHJldHVybiB7W3R5cGVdfSBbZGVzY3JpcHRpb25dXG4gKi9cbi8qIEFsbCBsaWJyYXJ5IHdpZGdldHMgYW5kIHNwZWNpZmljIG1vZHVsZXMgKi9cbi5idWJibGU6YmVmb3JlLCAuYnViYmxlOmFmdGVyIHtcbiAgY29udGVudDogJyc7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGxlZnQ6IC0yMHB4O1xuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50ICNlZGViZTUgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQ7XG4gIGJvdHRvbTogMjBweDtcbiAgd2lkdGg6IDA7XG4gIGhlaWdodDogMDtcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgYm9yZGVyLXdpZHRoOiAxMHB4O1xuICBib3JkZXItcmFkaXVzOiBpbmhlcml0OyB9XG4uYnViYmxlOmFmdGVyIHtcbiAgbGVmdDogLTE4cHg7XG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgI2ZmZmZmZiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudDsgfVxuXG4ubGhmc193aWRnZXQgLnRpcCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICM4Y2QxZTY7XG4gIHBhZGRpbmc6IDIwcHggMTVweDtcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xuICBkaXNwbGF5OiBub25lO1xuICBtYXJnaW4tYm90dG9tOiAxOHB4O1xuICBwYWRkaW5nLWxlZnQ6IDQwcHg7IH1cbiAgLmxoZnNfd2lkZ2V0IC50aXAudmlzaWJsZSB7XG4gICAgZGlzcGxheTogYmxvY2s7IH1cbiAgLmxoZnNfd2lkZ2V0IC50aXAgLmludHJvIHtcbiAgICBjb2xvcjogI2ZmZmZmZjtcbiAgICBmb250LXNpemU6IDIycHg7XG4gICAgZm9udC1mYW1pbHk6ICdzZW50aWNvc2Fuc2R0cmVndWxhcicsIEFyaWFsLCBWZXJkYW5hLCBzYW5zLXNlcmlmO1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7IH1cbiAgICAubGhmc193aWRnZXQgLnRpcCAuaW50cm86YmVmb3JlIHtcbiAgICAgIGZvbnQtZmFtaWx5OiAnYWVnb25faWNvbnMnO1xuICAgICAgY29udGVudDogXCJcXGU2MzFcIjtcbiAgICAgIG1hcmdpbi1sZWZ0OiAtMjBweDtcbiAgICAgIG1hcmdpbi1yaWdodDogLTVweDtcbiAgICAgIGxlZnQ6IC0xMHB4O1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlOyB9XG4ubGhmc193aWRnZXQgZm9ybSA+IHVsLCAubGhmc193aWRnZXQgdWwucHJvZHVjdHMge1xuICBtYXJnaW46IDMwcHggMDtcbiAgd2lkdGg6IDEwMCU7IH1cbiAgLmxoZnNfd2lkZ2V0IGZvcm0gPiB1bCBsaS5wcm9kdWN0IC5kZXNjcmlwdGlvbiwgLmxoZnNfd2lkZ2V0IHVsLnByb2R1Y3RzIGxpLnByb2R1Y3QgLmRlc2NyaXB0aW9uIHtcbiAgICBwYWRkaW5nLWxlZnQ6IDQwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDsgfVxuICAgIC5saGZzX3dpZGdldCBmb3JtID4gdWwgbGkucHJvZHVjdCAuZGVzY3JpcHRpb246YmVmb3JlLCAubGhmc193aWRnZXQgdWwucHJvZHVjdHMgbGkucHJvZHVjdCAuZGVzY3JpcHRpb246YmVmb3JlIHtcbiAgICAgIGZvbnQtZmFtaWx5OiAnYWVnb25faWNvbnMnO1xuICAgICAgY29sb3I6ICMzMzk1ZDM7XG4gICAgICBjb250ZW50OiBcIlxcZTYwNVwiO1xuICAgICAgbWFyZ2luLWxlZnQ6IC0yMHB4O1xuICAgICAgbGVmdDogLTEwcHg7XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cbiAgLmxoZnNfd2lkZ2V0IGZvcm0gPiB1bCBsaS5wcm9kdWN0IGRpdi50aXRsZSwgLmxoZnNfd2lkZ2V0IGZvcm0gPiB1bCBsaS5wcm9kdWN0IHNwYW4ucG9saWNlLW51bWJlciwgLmxoZnNfd2lkZ2V0IHVsLnByb2R1Y3RzIGxpLnByb2R1Y3QgZGl2LnRpdGxlLCAubGhmc193aWRnZXQgdWwucHJvZHVjdHMgbGkucHJvZHVjdCBzcGFuLnBvbGljZS1udW1iZXIge1xuICAgIGZvbnQtZmFtaWx5OiAnc2VudGljb3NhbnNkdG1lZGl1bScsIEFyaWFsLCBWZXJkYW5hLCBzYW5zLXNlcmlmOyB9XG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2NDFweCkgYW5kIChtYXgtd2lkdGg6IDE2MDAwcHgpIHtcbiAgLmxoZnNfd2lkZ2V0IGxpLnZhbHVlIHtcbiAgICBoZWlnaHQ6IDQ0cHg7IH0gfVxuLmxoZnNfd2lkZ2V0IGxpLnZhbHVlIHNwYW4uY29udGVudCwgLmxoZnNfd2lkZ2V0IGxpLnZhbHVlIHNwYW4uaGVscCB7XG4gIGRpc3BsYXk6IGlubGluZTsgfVxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjQwcHgpIHtcbiAgLmxoZnNfd2lkZ2V0IGxpLnZhbHVlIHNwYW4uaGVscCB7XG4gICAgZGlzcGxheTogbm9uZTsgfSB9XG4ubGhmc193aWRnZXQgbGkubGFiZWwge1xuICBtaW4taGVpZ2h0OiAwOyB9XG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDY0MXB4KSBhbmQgKG1heC13aWR0aDogMTYwMDBweCkge1xuICAgIC5saGZzX3dpZGdldCBsaS5sYWJlbCB7XG4gICAgICBoZWlnaHQ6IGluaGVyaXQ7IH0gfVxuICAubGhmc193aWRnZXQgbGkubGFiZWw6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6IFwiOlwiOyB9XG4ubGhmc193aWRnZXQgbGFiZWwubGVmdCB7XG4gIGZsb2F0OiBsZWZ0OyB9XG4ubGhmc193aWRnZXQgaW5wdXRbdHlwZT10ZXh0XSwgLmxoZnNfd2lkZ2V0IGlucHV0W3R5cGU9ZW1haWxdLCAubGhmc193aWRnZXQgaW5wdXRbdHlwZT1udW1iZXJdLCAubGhmc193aWRnZXQgc2VsZWN0LCAubGhmc193aWRnZXQgLmRkVGl0bGUge1xuICBkaXNwbGF5OiBub25lOyB9XG4ubGhmc193aWRnZXQgLmVkaXQgdWwuZXJyb3Ige1xuICBkaXNwbGF5OiBibG9jaztcbiAgb3BhY2l0eTogMDtcbiAgaGVpZ2h0OiAyNHB4O1xuICBtaW4taGVpZ2h0OiAwOyB9XG4gIC5saGZzX3dpZGdldCAuZWRpdCB1bC5lcnJvciBbY2xhc3MqPSdzcGFuJ10ge1xuICAgIG1pbi1oZWlnaHQ6IDA7XG4gICAgbGluZS1oZWlnaHQ6IDE4cHg7IH1cbiAgLmxoZnNfd2lkZ2V0IC5lZGl0IHVsLmVycm9yID4gbGkge1xuICAgIGNvbG9yOiAjQzUwQjFGO1xuICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICBtYXJnaW4tbGVmdDogMDsgfVxuICAubGhmc193aWRnZXQgLmVkaXQgdWwuZXJyb3IudmlzaWJsZSB7XG4gICAgb3BhY2l0eTogMTsgfVxuLmxoZnNfd2lkZ2V0IC5lZGl0IGxpLmxhYmVsIHtcbiAgcGFkZGluZy1yaWdodDogNTVweDsgfVxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2NDBweCkge1xuICAgIC5saGZzX3dpZGdldCAuZWRpdCBsaS5sYWJlbCB7XG4gICAgICB0ZXh0LWFsaWduOiBsZWZ0OyB9IH1cbi5saGZzX3dpZGdldCAuZWRpdCBsaS5sYWJlbCwgLmxoZnNfd2lkZ2V0IC5lZGl0IGxhYmVsIHtcbiAgZm9udC1mYW1pbHk6ICdzZW50aWNvc2Fuc2R0cmVndWxhcicsIEFyaWFsLCBWZXJkYW5hLCBzYW5zLXNlcmlmO1xuICB0ZXh0LWFsaWduOiByaWdodDsgfVxuICAubGhmc193aWRnZXQgLmVkaXQgbGkubGFiZWw6YWZ0ZXIsIC5saGZzX3dpZGdldCAuZWRpdCBsYWJlbDphZnRlciB7XG4gICAgY29udGVudDogXCJcIjsgfVxuLmxoZnNfd2lkZ2V0IC5lZGl0IGxpLmxhYmVsLnJlcXVpcmVkOmFmdGVyLCAubGhmc193aWRnZXQgLmVkaXQgbGFiZWwuY2hlY2tib3gucmVxdWlyZWQgc3Bhbi5sYWJlbDphZnRlciB7XG4gIG1hcmdpbi1sZWZ0OiA1cHg7XG4gIGNvbnRlbnQ6IFwiKlwiO1xuICBjb2xvcjogI0M1MEIxRjsgfVxuLmxoZnNfd2lkZ2V0IC5lZGl0IGlucHV0W3R5cGU9dGV4dF0sIC5saGZzX3dpZGdldCAuZWRpdCBpbnB1dFt0eXBlPWVtYWlsXSwgLmxoZnNfd2lkZ2V0IC5lZGl0IGlucHV0W3R5cGU9bnVtYmVyXSwgLmxoZnNfd2lkZ2V0IC5lZGl0IHNlbGVjdCwgLmxoZnNfd2lkZ2V0IC5lZGl0IC5kZFRpdGxlIHtcbiAgZGlzcGxheTogYmxvY2s7IH1cbi5saGZzX3dpZGdldCAuZWRpdCBsaS52YWx1ZSBzcGFuLmNvbnRlbnQsIC5saGZzX3dpZGdldCAuZWRpdCBsaS52YWx1ZSBzcGFuLmhlbHAge1xuICBkaXNwbGF5OiBub25lOyB9XG4ubGhmc193aWRnZXQgLnJvdy1mbHVpZCBbY2xhc3MqPSdzcGFuJ10ge1xuICBkaXNwbGF5OiBpbmxpbmU7IH1cbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjQwcHgpIHtcbiAgICAubGhmc193aWRnZXQgLnJvdy1mbHVpZCBbY2xhc3MqPSdzcGFuJ10ge1xuICAgICAgbWluLWhlaWdodDogNXB4OyB9IH1cblxuLmxoZnNfd2lkZ2V0IGRpdi5wYXltZW50cyAuc3RhdHVzIHNwYW46YmVmb3JlIHtcbiAgZm9udC1mYW1pbHk6ICdhZWdvbl9pY29ucyc7XG4gIG1hcmdpbi1yaWdodDogNXB4OyB9XG4ubGhmc193aWRnZXQgZGl2LnBheW1lbnRzIC5zdGF0dXMgc3Bhbi5vcGVuIHtcbiAgY29sb3I6ICNDNTBCMUY7IH1cbiAgLmxoZnNfd2lkZ2V0IGRpdi5wYXltZW50cyAuc3RhdHVzIHNwYW4ub3BlbjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6IFwiXFxlNjMxXCI7IH1cbi5saGZzX3dpZGdldCBkaXYucGF5bWVudHMgLnN0YXR1cyBzcGFuLnBhaWQge1xuICBjb2xvcjogIzQ5YWY1NzsgfVxuICAubGhmc193aWRnZXQgZGl2LnBheW1lbnRzIC5zdGF0dXMgc3Bhbi5wYWlkOmJlZm9yZSB7XG4gICAgY29udGVudDogXCJcXGU2MzJcIjsgfVxuLmxoZnNfd2lkZ2V0IGRpdi5wYXltZW50cyA+IHVsID4gbGkgPiB1bCwgLmxoZnNfd2lkZ2V0IGRpdi5wYXltZW50cyA+IHVsID4gbGkgPiB1bC52aXNpYmxlIHtcbiAgZGlzcGxheTogdGFibGU7XG4gIHdpZHRoOiAxMDAlO1xuICBib3JkZXItdG9wOiBub25lO1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2UwZTBlMDtcbiAgcGFkZGluZzogMTBweCAxNXB4OyB9XG4gIC5saGZzX3dpZGdldCBkaXYucGF5bWVudHMgPiB1bCA+IGxpID4gdWwuaGVhZGVyLCAubGhmc193aWRnZXQgZGl2LnBheW1lbnRzID4gdWwgPiBsaSA+IHVsLnZpc2libGUuaGVhZGVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlYmU1O1xuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZTBlMGUwO1xuICAgIGJvcmRlci1ib3R0b206IG5vbmU7IH1cbiAgICAubGhmc193aWRnZXQgZGl2LnBheW1lbnRzID4gdWwgPiBsaSA+IHVsLmhlYWRlciA+IGxpLCAubGhmc193aWRnZXQgZGl2LnBheW1lbnRzID4gdWwgPiBsaSA+IHVsLnZpc2libGUuaGVhZGVyID4gbGkge1xuICAgICAgZm9udC1mYW1pbHk6ICdzZW50aWNvc2Fuc2R0bWVkaXVtJywgQXJpYWwsIFZlcmRhbmEsIHNhbnMtc2VyaWY7IH1cbiAgLmxoZnNfd2lkZ2V0IGRpdi5wYXltZW50cyA+IHVsID4gbGkgPiB1bCA+IGxpOm50aC1vZi10eXBlKDEpLCAubGhmc193aWRnZXQgZGl2LnBheW1lbnRzID4gdWwgPiBsaSA+IHVsLnZpc2libGUgPiBsaTpudGgtb2YtdHlwZSgxKSB7XG4gICAgd2lkdGg6IDIwMHB4OyB9XG4gIC5saGZzX3dpZGdldCBkaXYucGF5bWVudHMgPiB1bCA+IGxpID4gdWwgPiBsaTpudGgtb2YtdHlwZSgyKSwgLmxoZnNfd2lkZ2V0IGRpdi5wYXltZW50cyA+IHVsID4gbGkgPiB1bC52aXNpYmxlID4gbGk6bnRoLW9mLXR5cGUoMikge1xuICAgIHdpZHRoOiAxMjBweDsgfVxuICAubGhmc193aWRnZXQgZGl2LnBheW1lbnRzID4gdWwgPiBsaSA+IHVsID4gbGk6bnRoLW9mLXR5cGUoNCksIC5saGZzX3dpZGdldCBkaXYucGF5bWVudHMgPiB1bCA+IGxpID4gdWwudmlzaWJsZSA+IGxpOm50aC1vZi10eXBlKDQpIHtcbiAgICB3aWR0aDogMTIwcHg7IH1cbiAgLmxoZnNfd2lkZ2V0IGRpdi5wYXltZW50cyA+IHVsID4gbGkgPiB1bCA+IGxpOm50aC1vZi10eXBlKDUpLCAubGhmc193aWRnZXQgZGl2LnBheW1lbnRzID4gdWwgPiBsaSA+IHVsLnZpc2libGUgPiBsaTpudGgtb2YtdHlwZSg1KSB7XG4gICAgd2lkdGg6IDIwcHg7IH1cbi5saGZzX3dpZGdldCBkaXYucGF5bWVudHMgLm1ldGhvZCB7XG4gIGNvbG9yOiAjZTBlMGUwOyB9XG4ubGhmc193aWRnZXQgZGl2LnBheW1lbnRzIC5kZXRhaWxzIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cbiAgLmxoZnNfd2lkZ2V0IGRpdi5wYXltZW50cyAuZGV0YWlsczpiZWZvcmUge1xuICAgIGZvbnQtZmFtaWx5OiAnYWVnb25faWNvbnMnO1xuICAgIGNvbnRlbnQ6IFwiXFxlNjJkXCI7XG4gICAgY29sb3I6ICNlZGViZTU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cbi5saGZzX3dpZGdldCBkaXYucGF5bWVudHMgLmFtb3VudDpiZWZvcmUge1xuICBjb250ZW50OiBcIuKCrFwiOyB9XG4ubGhmc193aWRnZXQgZGl2LnBheW1lbnRzIC5kYXRlIHtcbiAgY29sb3I6ICMzMzk1ZDM7IH1cblxuLmlubGluZV9hbGVydCB7XG4gIHBhZGRpbmc6IDIwcHggMTVweDtcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xuICBkaXNwbGF5OiBub25lO1xuICBtYXJnaW4tYm90dG9tOiAxOHB4O1xuICBkaXNwbGF5OiBibG9jaztcbiAgYm9yZGVyOiAxcHggc29saWQgI0U2Q0VDRDtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YzZTdlNjsgfVxuICAuaW5saW5lX2FsZXJ0LnZpc2libGUge1xuICAgIGRpc3BsYXk6IGJsb2NrOyB9XG4gIC5pbmxpbmVfYWxlcnQgaHIge1xuICAgIGhlaWdodDogMXB4O1xuICAgIGNvbG9yOiAjRTZDRUNEO1xuICAgIHdpZHRoOiAxMDAlOyB9XG4gIC5pbmxpbmVfYWxlcnQgdWwucGF5bWVudHMge1xuICAgIG1hcmdpbjogMTVweCAtMTVweDsgfVxuICAgIC5pbmxpbmVfYWxlcnQgdWwucGF5bWVudHMgYnV0dG9uLndoaXRlIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyB9XG4gICAgICAuaW5saW5lX2FsZXJ0IHVsLnBheW1lbnRzIGJ1dHRvbi53aGl0ZTpiZWZvcmUge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgfVxuICAgIC5pbmxpbmVfYWxlcnQgdWwucGF5bWVudHMgPiBsaSA+IHVsIHtcbiAgICAgIHBhZGRpbmc6IDEwcHggMTVweDtcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNFNkNFQ0Q7XG4gICAgICBib3JkZXItd2lkdGg6IDFweCAwIDAgMDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgZGlzcGxheTogdGFibGU7IH1cbiAgICAgIC5pbmxpbmVfYWxlcnQgdWwucGF5bWVudHMgPiBsaSA+IHVsID4gbGkge1xuICAgICAgICBmbG9hdDogbm9uZTsgfVxuICAgICAgICAuaW5saW5lX2FsZXJ0IHVsLnBheW1lbnRzID4gbGkgPiB1bCA+IGxpOmZpcnN0LW9mLXR5cGU6bGFzdC1vZi10eXBlIHtcbiAgICAgICAgICB0ZXh0LWFsaWduOiByaWdodDsgfVxuICAgICAgICAuaW5saW5lX2FsZXJ0IHVsLnBheW1lbnRzID4gbGkgPiB1bCA+IGxpOm50aC1vZi10eXBlKDIpIHtcbiAgICAgICAgICB3aWR0aDogMTIwcHg7IH1cbiAgICAgICAgICAuaW5saW5lX2FsZXJ0IHVsLnBheW1lbnRzID4gbGkgPiB1bCA+IGxpOm50aC1vZi10eXBlKDIpIHNwYW4uZGViaXQge1xuICAgICAgICAgICAgZm9udC1mYW1pbHk6ICdzZW50aWNvc2Fuc2R0bWVkaXVtJywgQXJpYWwsIFZlcmRhbmEsIHNhbnMtc2VyaWY7IH1cbiAgICAgICAgICAgIC5pbmxpbmVfYWxlcnQgdWwucGF5bWVudHMgPiBsaSA+IHVsID4gbGk6bnRoLW9mLXR5cGUoMikgc3Bhbi5kZWJpdDpiZWZvcmUge1xuICAgICAgICAgICAgICBjb250ZW50OiBcIuKCrFwiOyB9XG4gICAgICAgIC5pbmxpbmVfYWxlcnQgdWwucGF5bWVudHMgPiBsaSA+IHVsID4gbGk6bnRoLW9mLXR5cGUoMykge1xuICAgICAgICAgIHdpZHRoOiA4MHB4OyB9XG4gICAgICAgIC5pbmxpbmVfYWxlcnQgdWwucGF5bWVudHMgPiBsaSA+IHVsID4gbGk6bnRoLW9mLXR5cGUoNCkge1xuICAgICAgICAgIHdpZHRoOiAxMjBweDsgfVxuICAuaW5saW5lX2FsZXJ0IGgzIHtcbiAgICBjb2xvcjogIzFkMWQxYjtcbiAgICBmb250LXdlaWdodDogYm9sZDsgfVxuXG4uaGVscCB7XG4gIG1hcmdpbjogMDtcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGZsb2F0OiByaWdodDtcbiAgcG9zaXRpb246IHJlbGF0aXZlOyB9XG4gIC5oZWxwW3RpdGxlPScnXSB7XG4gICAgZGlzcGxheTogbm9uZTsgfVxuICAuaGVscC5kaWFsb2cge1xuICAgIHotaW5kZXg6IDU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzk5Q0FFOTtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgcGFkZGluZzogMThweDtcbiAgICBtYXgtd2lkdGg6IDQwMHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDNweDsgfVxuICAgIC5oZWxwLmRpYWxvZzpiZWZvcmUsIC5oZWxwLmRpYWxvZzphZnRlciB7XG4gICAgICBjb250ZW50OiAnJztcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgdG9wOiAtMjBweDtcbiAgICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgd2hpdGUgdHJhbnNwYXJlbnQ7XG4gICAgICBsZWZ0OiAyMDBweDtcbiAgICAgIHdpZHRoOiAwO1xuICAgICAgaGVpZ2h0OiAwO1xuICAgICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgICAgIGJvcmRlci13aWR0aDogMTBweDtcbiAgICAgIGJvcmRlci1yYWRpdXM6IGluaGVyaXQ7IH1cbiAgICAuaGVscC5kaWFsb2c6YWZ0ZXIge1xuICAgICAgdG9wOiAtMThweDtcbiAgICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgIzk5Q0FFOSB0cmFuc3BhcmVudDsgfVxuICAuaGVscDpiZWZvcmUge1xuICAgIGZvbnQtZmFtaWx5OiAnYWVnb25faWNvbnMnO1xuICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICBjb250ZW50OiBcIlxcZTYyZlwiO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgfVxuXG51bC5hY3Rpb25zIHtcbiAgdGV4dC1hbGlnbjogbGVmdDsgfVxuICB1bC5hY3Rpb25zIGxpIHtcbiAgICBmbG9hdDogbm9uZTtcbiAgICBkaXNwbGF5OiBibG9jazsgfVxuICAgIHVsLmFjdGlvbnMgbGkuZWRpdCB7XG4gICAgICBkaXNwbGF5OiBub25lOyB9XG4gIHVsLmFjdGlvbnMuZWRpdCB7XG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7IH1cbiAgICB1bC5hY3Rpb25zLmVkaXQgbGkge1xuICAgICAgdGV4dC1hbGlnbjogbGVmdDsgfVxuICAgICAgdWwuYWN0aW9ucy5lZGl0IGxpLmVkaXQge1xuICAgICAgICBwYWRkaW5nLWxlZnQ6IDA7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrOyB9XG4gICAgICAgIHVsLmFjdGlvbnMuZWRpdCBsaS5lZGl0IGRpdi5kaXNhYmxlciB7XG4gICAgICAgICAgei1pbmRleDogMjtcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICB0b3A6IC0zOHB4O1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgICAgICAgIG9wYWNpdHk6IDAuNTtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBoZWlnaHQ6IDM4cHg7XG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7IH1cbiAgICAgIHVsLmFjdGlvbnMuZWRpdCBsaS52aWV3IHtcbiAgICAgICAgZGlzcGxheTogbm9uZTsgfVxuICAgICAgdWwuYWN0aW9ucy5lZGl0IGxpIGJ1dHRvbiB7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgei1pbmRleDogMzsgfVxuICAgICAgICB1bC5hY3Rpb25zLmVkaXQgbGkgYnV0dG9uLmRpc2FibGVkIHtcbiAgICAgICAgICB6LWluZGV4OiAxOyB9XG5cbmxpLnJpZ2h0IHtcbiAgdGV4dC1hbGlnbjogcmlnaHQ7IH1cblxudWwuaG9yaXpvbnRhbCB7XG4gIGRpc3BsYXk6IHRhYmxlO1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDFweCAwO1xuICBkaXNwbGF5OiBub25lOyB9XG4gIHVsLmhvcml6b250YWwucm93LWZsdWlkIHtcbiAgICBoZWlnaHQ6IDUwcHg7IH1cbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjQwcHgpIHtcbiAgICB1bC5ob3Jpem9udGFsIHtcbiAgICAgIG1hcmdpbi1ib3R0b206IDMwcHg7IH0gfVxuICB1bC5ob3Jpem9udGFsLmNsZWFyIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICBtYXJnaW46IDAgMCAtMXB4O1xuICAgIGNsZWFyOiBib3RoOyB9XG4gIHVsLmhvcml6b250YWwudmlzaWJsZSB7XG4gICAgZGlzcGxheTogYmxvY2s7IH1cbiAgdWwuaG9yaXpvbnRhbCBsaSB7XG4gICAgZGlzcGxheTogdGFibGUtY2VsbDsgfVxuICAgIHVsLmhvcml6b250YWwgbGkubGFiZWwge1xuICAgICAgZm9udC1mYW1pbHk6ICdzZW50aWNvc2Fuc2R0cmVndWxhcicsIEFyaWFsLCBWZXJkYW5hLCBzYW5zLXNlcmlmOyB9XG4gICAgdWwuaG9yaXpvbnRhbCBsaS52YWx1ZSB7XG4gICAgICBmb250LWZhbWlseTogJ3NlbnRpY29zYW5zZHRsaWdodCcsIEFyaWFsLCBWZXJkYW5hLCBzYW5zLXNlcmlmOyB9XG5cbi8qKlxuICogQWRkZWQgYnkgUm9jY286IFBsZWFzZSBjaGVjayB0aGUgZXhwbGFuYXRpb24gd3JvdGUgaW4gbGF5b3V0L19ncmlkLnNjc3MgYXQgXG4gKiBsaW5lIDEwMCwgcmVsYXRlZCB0byB0aGlzIHNwZWNpZmljIGRlY2xhcmF0aW9uIGJlbG93LCB0aGF0IGhlbHBzIHRvIHZpc3VhaXplIFxuICogeW91ciB3aWRnZXQgaW4gdGhlIHJpZ2h0IHdheS5cbiAqL1xuLmxoZnNfd2lkZ2V0IC5wcm9kdWN0LmRhdGEuc3BhbjEyLCAubGhmc193aWRnZXQgLnJvdy1mbHVpZCBsaS52YWx1ZVtjbGFzcyo9J3NwYW4nXSB7XG4gIG1hcmdpbi1sZWZ0OiAwOyB9XG5cbi5wZXJzb25hbF9kZXRhaWxzX3dpZGdldCB1bC5ob3Jpem9udGFsIHtcbiAgZGlzcGxheTogYmxvY2s7IH1cbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDY0MXB4KSBhbmQgKG1heC13aWR0aDogMTYwMDBweCkge1xuICAucGVyc29uYWxfZGV0YWlsc193aWRnZXQgbGkudmFsdWUge1xuICAgIGxpbmUtaGVpZ2h0OiAxMDAlO1xuICAgIG1pbi1oZWlnaHQ6IDQ0cHg7IH0gfVxuLnBlcnNvbmFsX2RldGFpbHNfd2lkZ2V0IGxpLnZhbHVlIHNwYW4uY29udGVudCwgLnBlcnNvbmFsX2RldGFpbHNfd2lkZ2V0IGxpLnZhbHVlIHNwYW4uaGVscCB7XG4gIGRpc3BsYXk6IGlubGluZTsgfVxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjQwcHgpIHtcbiAgLnBlcnNvbmFsX2RldGFpbHNfd2lkZ2V0IGxpLnZhbHVlIHNwYW4uaGVscCB7XG4gICAgZGlzcGxheTogbm9uZTsgfSB9XG4ucGVyc29uYWxfZGV0YWlsc193aWRnZXQgbGkubGFiZWwge1xuICBtaW4taGVpZ2h0OiAwOyB9XG4gIC5wZXJzb25hbF9kZXRhaWxzX3dpZGdldCBsaS5sYWJlbDphZnRlciB7XG4gICAgY29udGVudDogXCI6XCI7IH1cbi5wZXJzb25hbF9kZXRhaWxzX3dpZGdldCBsYWJlbC5sZWZ0IHtcbiAgZmxvYXQ6IGxlZnQ7IH1cbi5wZXJzb25hbF9kZXRhaWxzX3dpZGdldCAuZWRpdCB1bC5lcnJvciB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBvcGFjaXR5OiAwO1xuICBoZWlnaHQ6IDI0cHg7XG4gIG1pbi1oZWlnaHQ6IDA7IH1cbiAgLnBlcnNvbmFsX2RldGFpbHNfd2lkZ2V0IC5lZGl0IHVsLmVycm9yIFtjbGFzcyo9J3NwYW4nXSB7XG4gICAgbWluLWhlaWdodDogMDtcbiAgICBsaW5lLWhlaWdodDogMThweDsgfVxuICAucGVyc29uYWxfZGV0YWlsc193aWRnZXQgLmVkaXQgdWwuZXJyb3IgPiBsaSB7XG4gICAgY29sb3I6ICNDNTBCMUY7XG4gICAgZm9udC1zaXplOiAxNHB4O1xuICAgIG1hcmdpbi1sZWZ0OiAwOyB9XG4gIC5wZXJzb25hbF9kZXRhaWxzX3dpZGdldCAuZWRpdCB1bC5lcnJvci52aXNpYmxlIHtcbiAgICBvcGFjaXR5OiAxOyB9XG4ucGVyc29uYWxfZGV0YWlsc193aWRnZXQgLmVkaXQgbGkubGFiZWwge1xuICB0ZXh0LWFsaWduOiByaWdodDsgfVxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2NDBweCkge1xuICAgIC5wZXJzb25hbF9kZXRhaWxzX3dpZGdldCAuZWRpdCBsaS5sYWJlbCB7XG4gICAgICB0ZXh0LWFsaWduOiBsZWZ0OyB9IH1cbi5wZXJzb25hbF9kZXRhaWxzX3dpZGdldCAuZWRpdCBsaS5sYWJlbCwgLnBlcnNvbmFsX2RldGFpbHNfd2lkZ2V0IC5lZGl0IGxhYmVsIHtcbiAgZm9udC1mYW1pbHk6ICdzZW50aWNvc2Fuc2R0cmVndWxhcicsIEFyaWFsLCBWZXJkYW5hLCBzYW5zLXNlcmlmOyB9XG4gIC5wZXJzb25hbF9kZXRhaWxzX3dpZGdldCAuZWRpdCBsaS5sYWJlbDphZnRlciwgLnBlcnNvbmFsX2RldGFpbHNfd2lkZ2V0IC5lZGl0IGxhYmVsOmFmdGVyIHtcbiAgICBjb250ZW50OiBcIlwiOyB9XG4ucGVyc29uYWxfZGV0YWlsc193aWRnZXQgLmVkaXQgbGkubGFiZWwucmVxdWlyZWQ6YWZ0ZXIsIC5wZXJzb25hbF9kZXRhaWxzX3dpZGdldCAuZWRpdCBsYWJlbC5jaGVja2JveC5yZXF1aXJlZCBzcGFuLmxhYmVsOmFmdGVyIHtcbiAgbWFyZ2luLWxlZnQ6IDVweDtcbiAgY29udGVudDogXCIqXCI7XG4gIGNvbG9yOiAjQzUwQjFGOyB9XG4ucGVyc29uYWxfZGV0YWlsc193aWRnZXQgdWwuaG9yaXpvbnRhbC5yb3ctZmx1aWQge1xuICBoZWlnaHQ6IGF1dG87XG4gIG1hcmdpbi1ib3R0b206IDIwcHg7IH1cbi5wZXJzb25hbF9kZXRhaWxzX3dpZGdldCAucm93LWZsdWlkIFtjbGFzcyo9J3NwYW4nXSB7XG4gIGRpc3BsYXk6IGlubGluZTsgfVxuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2NDBweCkge1xuICAgIC5wZXJzb25hbF9kZXRhaWxzX3dpZGdldCAucm93LWZsdWlkIFtjbGFzcyo9J3NwYW4nXSB7XG4gICAgICBtaW4taGVpZ2h0OiA1cHg7IH0gfVxuLnBlcnNvbmFsX2RldGFpbHNfd2lkZ2V0IC5OTCwgLnBlcnNvbmFsX2RldGFpbHNfd2lkZ2V0IC53b3JsZCB7XG4gIGRpc3BsYXk6IG5vbmU7IH1cbiAgLnBlcnNvbmFsX2RldGFpbHNfd2lkZ2V0IC5OTC52aXNpYmxlLCAucGVyc29uYWxfZGV0YWlsc193aWRnZXQgLndvcmxkLnZpc2libGUge1xuICAgIGRpc3BsYXk6IGJsb2NrOyB9XG4ucGVyc29uYWxfZGV0YWlsc193aWRnZXQgLnJlc2lkZW50aWFsX2FkZHJlc3Mge1xuICBib3R0b20tbWFyZ2luOiA0MHB4OyB9XG5cbi5jb250cmFjdF9vdmVydmlld193aWRnZXQgdWwge1xuICBwYWRkaW5nOiAwOyB9XG4gIC5jb250cmFjdF9vdmVydmlld193aWRnZXQgdWwgbGkge1xuICAgIHBhZGRpbmc6IDJweCAwOyB9XG4gICAgLmNvbnRyYWN0X292ZXJ2aWV3X3dpZGdldCB1bCBsaS5jYXRlZ29yeSB7XG4gICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2FhYTtcbiAgICAgIHBhZGRpbmc6IDMwcHggMTBweDtcbiAgICAgIHBhZGRpbmc6IDEuODc1cmVtIDAuNjI1cmVtO1xuICAgICAgbWFyZ2luOiAxMHB4IDEwcHg7XG4gICAgICBtYXJnaW46IDAuNjI1cmVtIDAuNjI1cmVtOyB9XG4gICAgICAuY29udHJhY3Rfb3ZlcnZpZXdfd2lkZ2V0IHVsIGxpLmNhdGVnb3J5OmZpcnN0LWNoaWxkIHtcbiAgICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNhYWE7IH1cbiAgICAgIC5jb250cmFjdF9vdmVydmlld193aWRnZXQgdWwgbGkuY2F0ZWdvcnk6bGFzdC1jaGlsZCB7XG4gICAgICAgIGJvcmRlci1ib3R0b206IG5vbmU7IH1cbiAgICAuY29udHJhY3Rfb3ZlcnZpZXdfd2lkZ2V0IHVsIGxpLmFycm93IHtcbiAgICAgIG1hcmdpbjogMDtcbiAgICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IDJweCBjZW50ZXI7XG4gICAgICBwYWRkaW5nLWxlZnQ6IDE4cHg7IH1cbiAgICAgIC5jb250cmFjdF9vdmVydmlld193aWRnZXQgdWwgbGkuYXJyb3c6YmVmb3JlIHtcbiAgICAgICAgZGlzcGxheTogbm9uZTsgfVxuICAuY29udHJhY3Rfb3ZlcnZpZXdfd2lkZ2V0IHVsLmhvcml6b250YWwge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgcGFkZGluZzogNnB4IDA7IH1cbiAgICAuY29udHJhY3Rfb3ZlcnZpZXdfd2lkZ2V0IHVsLmhvcml6b250YWwgbGkge1xuICAgICAgZmxvYXQ6IG5vbmU7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7XG4gICAgICBwYWRkaW5nOiAycHggMTlweDtcbiAgICAgIHBhZGRpbmc6IDAuMTI1cmVtIDEuMTg3NXJlbTsgfVxuICAgICAgLmNvbnRyYWN0X292ZXJ2aWV3X3dpZGdldCB1bC5ob3Jpem9udGFsIGxpOmZpcnN0LWNoaWxkIHtcbiAgICAgICAgd2lkdGg6IDEwMCU7IH1cbiAgICAuY29udHJhY3Rfb3ZlcnZpZXdfd2lkZ2V0IHVsLmhvcml6b250YWwudHlwZSB7XG4gICAgICBtYXJnaW4tYm90dG9tOiAzMHB4OyB9XG4gIC5jb250cmFjdF9vdmVydmlld193aWRnZXQgdWwuaG9yaXpvbnRhbC5oZWFkZXIge1xuICAgIGRpc3BsYXk6IG5vbmU7IH1cbi5jb250cmFjdF9vdmVydmlld193aWRnZXQgLmxhYmVsIHtcbiAgY29sb3I6ICMzMzk1ZDM7XG4gIGZvbnQtd2VpZ2h0OiBib2xkOyB9XG4uY29udHJhY3Rfb3ZlcnZpZXdfd2lkZ2V0IC52YWx1ZTpub3QoLnRpdGxlKSB7XG4gIGZvbnQtZmFtaWx5OiAnc2VudGljb3NhbnNkdHJlZ3VsYXInLCBBcmlhbCwgVmVyZGFuYSwgc2Fucy1zZXJpZjsgfVxuLmNvbnRyYWN0X292ZXJ2aWV3X3dpZGdldCAucHJvZHVjdC50aXRsZSB7XG4gIGRpc3BsYXk6IG5vbmU7IH1cbi5jb250cmFjdF9vdmVydmlld193aWRnZXQgLnZhbHVlLnRpdGxlIHtcbiAgZGlzcGxheTogbm9uZTsgfVxuLmNvbnRyYWN0X292ZXJ2aWV3X3dpZGdldCAubWVzc2FnZXMge1xuICBtYXJnaW46IDEwcHggMTBweCAzNXB4O1xuICBtYXJnaW46IDAuNjI1cmVtIDAuNjI1cmVtIDIuMTg3NXJlbTsgfVxuLmNvbnRyYWN0X292ZXJ2aWV3X3dpZGdldCBoMiB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTsgfVxuICAuY29udHJhY3Rfb3ZlcnZpZXdfd2lkZ2V0IGgyW2NsYXNzKj1cImljb24tXCJdOmJlZm9yZSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogNTAlO1xuICAgIGxlZnQ6IDA7XG4gICAgbWFyZ2luLWxlZnQ6IC00MHB4O1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgICBmb250LXNpemU6IDI1cHg7XG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsgfVxuXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDY0MXB4KSB7XG4gIC5jb250cmFjdF9vdmVydmlld193aWRnZXQgdWwuaG9yaXpvbnRhbCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZzogMDsgfVxuICAgIC5jb250cmFjdF9vdmVydmlld193aWRnZXQgdWwuaG9yaXpvbnRhbCBsaSB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICBwYWRkaW5nOiA4cHggMTlweDtcbiAgICAgIHBhZGRpbmc6IDAuNXJlbSAxLjE4NzVyZW07IH1cbiAgICAgIC5jb250cmFjdF9vdmVydmlld193aWRnZXQgdWwuaG9yaXpvbnRhbCBsaTpmaXJzdC1jaGlsZCB7XG4gICAgICAgIHdpZHRoOiA2MCU7IH1cbiAgLmNvbnRyYWN0X292ZXJ2aWV3X3dpZGdldCB1bC5ob3Jpem9udGFsLmhlYWRlciB7XG4gICAgZGlzcGxheTogYmxvY2s7IH1cbiAgICAuY29udHJhY3Rfb3ZlcnZpZXdfd2lkZ2V0IHVsLmhvcml6b250YWwuaGVhZGVyIGxpIHtcbiAgICAgIHBhZGRpbmc6IDJweCAxOXB4O1xuICAgICAgcGFkZGluZzogMC4xMjVyZW0gMS4xODc1cmVtOyB9XG4gICAgICAuY29udHJhY3Rfb3ZlcnZpZXdfd2lkZ2V0IHVsLmhvcml6b250YWwuaGVhZGVyIGxpOmZpcnN0LWNoaWxkIHtcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAwOyB9XG4gIC5jb250cmFjdF9vdmVydmlld193aWRnZXQgdWwgbGkge1xuICAgIHBhZGRpbmc6IDhweCAwcHg7XG4gICAgcGFkZGluZzogMC41cmVtIDByZW07IH1cbiAgICAuY29udHJhY3Rfb3ZlcnZpZXdfd2lkZ2V0IHVsIGxpIHNwYW4udmFsdWUge1xuICAgICAgcGFkZGluZzogMDsgfVxuICAuY29udHJhY3Rfb3ZlcnZpZXdfd2lkZ2V0IC5wcm9kdWN0LnRpdGxlIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBwYWRkaW5nOiAxMHB4IDA7XG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDsgfVxuICAuY29udHJhY3Rfb3ZlcnZpZXdfd2lkZ2V0IC52YWx1ZS50aXRsZSB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgcGFkZGluZzogMTBweCAwO1xuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7IH0gfVxuXG4ubXlfZG9jdW1lbnRzX3dpZGdldCBhcnRpY2xlIHtcbiAgbWFyZ2luOiAwcHggMHB4O1xuICBtYXJnaW46IDByZW0gMHJlbTtcbiAgYm9yZGVyLWJvdHRvbS1zdHlsZTogc29saWQ7XG4gIGJvcmRlci1ib3R0b20tY29sb3I6ICNlMGUwZTA7XG4gIGJvcmRlci1ib3R0b20td2lkdGg6IDFweDtcbiAgYm9yZGVyLWJvdHRvbS13aWR0aDogMC4wNjI1cmVtOyB9XG4gIC5teV9kb2N1bWVudHNfd2lkZ2V0IGFydGljbGU6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgbWFyZ2luLXRvcDogMzBweDtcbiAgICBtYXJnaW4tdG9wOiAxLjg3NXJlbTtcbiAgICBib3JkZXItdG9wLXN0eWxlOiBzb2xpZDtcbiAgICBib3JkZXItdG9wLWNvbG9yOiAjZTBlMGUwO1xuICAgIGJvcmRlci10b3Atd2lkdGg6IDFweDtcbiAgICBib3JkZXItdG9wLXdpZHRoOiAwLjA2MjVyZW07IH1cbiAgLm15X2RvY3VtZW50c193aWRnZXQgYXJ0aWNsZTpsYXN0LW9mLXR5cGUge1xuICAgIGJvcmRlci1ib3R0b20tc3R5bGU6IG5vbmU7IH1cbiAgLm15X2RvY3VtZW50c193aWRnZXQgYXJ0aWNsZSA+IGRsIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBwYWRkaW5nOiAwcHggMjBweDtcbiAgICBwYWRkaW5nOiAwcmVtIDEuMjVyZW07XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB0cmFuc2l0aW9uOiBtYXgtaGVpZ2h0IC4ycyBlYXNlO1xuICAgIG1hcmdpbjogMDtcbiAgICBtYXgtaGVpZ2h0OiAwOyB9XG4gIC5teV9kb2N1bWVudHNfd2lkZ2V0IGFydGljbGUub3BlbiA+IGRsIHtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgbWF4LWhlaWdodDogMTAwMGVtO1xuICAgIHRyYW5zaXRpb246IG1heC1oZWlnaHQgMnMgZWFzZS1pbjsgfVxuICAubXlfZG9jdW1lbnRzX3dpZGdldCBhcnRpY2xlLm9wZW4gaDI6YWZ0ZXIge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKC05MGRlZyk7IH1cbi5teV9kb2N1bWVudHNfd2lkZ2V0IGgyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBmb250LXNpemU6IDMwcHg7XG4gIGZvbnQtc2l6ZTogMS44NzVyZW07XG4gIG1hcmdpbjogMHB4O1xuICBtYXJnaW46IDByZW07XG4gIHBhZGRpbmc6IDIwcHggMHB4IDIwcHggMTVweDtcbiAgcGFkZGluZzogMS4yNXJlbSAwcmVtIDEuMjVyZW0gMC45Mzc1cmVtO1xuICBsaW5lLWhlaWdodDogNjBweDtcbiAgbGluZS1oZWlnaHQ6IDMuNzVyZW07XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHVzZXItc2VsZWN0OiBub25lOyB9XG4gIC5teV9kb2N1bWVudHNfd2lkZ2V0IGgyOmJlZm9yZSB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIGZvbnQtc2l6ZTogMjVweDtcbiAgICBmb250LXNpemU6IDEuNTYyNXJlbTtcbiAgICBtYXJnaW46IDBweCAyMHB4IDBweCAwcHg7XG4gICAgbWFyZ2luOiAwcmVtIDEuMjVyZW0gMHJlbSAwcmVtO1xuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7IH1cbiAgLm15X2RvY3VtZW50c193aWRnZXQgaDI6YWZ0ZXIge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBmb250LXNpemU6IDE1cHg7XG4gICAgZm9udC1zaXplOiAwLjkzNzVyZW07XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHJpZ2h0OiAwO1xuICAgIG1hcmdpbi1yaWdodDogMzBweDtcbiAgICBtYXJnaW4tcmlnaHQ6IDEuODc1cmVtO1xuICAgIGZvbnQtZmFtaWx5OiAnYWVnb25faWNvbnMnO1xuICAgIGNvbnRlbnQ6ICdcXGU2MDAnO1xuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIC4ycyBlYXNlO1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTsgfVxuLm15X2RvY3VtZW50c193aWRnZXQgZGwucm93LWZsdWlkID4gZHQge1xuICBkaXNwbGF5OiBub25lOyB9XG4ubXlfZG9jdW1lbnRzX3dpZGdldCBkbC5yb3ctZmx1aWQgZGQ6Zmlyc3QtY2hpbGQgYSB7XG4gIGZvbnQtZmFtaWx5OiAnc2VudGljb3NhbnNkdHJlZ3VsYXInLCBBcmlhbCwgVmVyZGFuYSwgc2Fucy1zZXJpZjsgfVxuICAubXlfZG9jdW1lbnRzX3dpZGdldCBkbC5yb3ctZmx1aWQgZGQ6Zmlyc3QtY2hpbGQgYTpiZWZvcmUge1xuICAgIGRpc3BsYXk6IGlubGluZTtcbiAgICBmb250LXNpemU6IDEwcHg7XG4gICAgZm9udC1zaXplOiAwLjYyNXJlbTtcbiAgICBsaW5lLWhlaWdodDogaW5oZXJpdDtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyB9XG4ubXlfZG9jdW1lbnRzX3dpZGdldCAuaWNvbi1wZGY6YmVmb3JlIHtcbiAgZm9udC1zaXplOiAyNXB4O1xuICBmb250LXNpemU6IDEuNTYyNXJlbTsgfVxuXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDY0MXB4KSB7XG4gIC5teV9kb2N1bWVudHNfd2lkZ2V0IGFydGljbGUge1xuICAgIG1hcmdpbjogMzBweCAwcHg7XG4gICAgbWFyZ2luOiAxLjg3NXJlbSAwcmVtOyB9XG4gICAgLm15X2RvY3VtZW50c193aWRnZXQgYXJ0aWNsZTpmaXJzdC1vZi10eXBlIHtcbiAgICAgIG1hcmdpbi10b3A6IDA7XG4gICAgICBib3JkZXItdG9wOiBub25lOyB9XG4gICAgLm15X2RvY3VtZW50c193aWRnZXQgYXJ0aWNsZSA+IGRsIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgbWF4LWhlaWdodDogaW5oZXJpdDtcbiAgICAgIHBhZGRpbmc6IDEwcHggMHB4O1xuICAgICAgcGFkZGluZzogMC42MjVyZW0gMHJlbTsgfVxuICAubXlfZG9jdW1lbnRzX3dpZGdldCBoMiB7XG4gICAgZm9udC1zaXplOiA0MHB4O1xuICAgIGZvbnQtc2l6ZTogMi41cmVtO1xuICAgIHBhZGRpbmc6IDBweCAwcHg7XG4gICAgcGFkZGluZzogMHJlbSAwcmVtO1xuICAgIG1hcmdpbjogNXB4IDBweCAyMHB4IDBweDtcbiAgICBtYXJnaW46IDAuMzEyNXJlbSAwcmVtIDEuMjVyZW0gMHJlbTtcbiAgICBsaW5lLWhlaWdodDogNDBweDtcbiAgICBsaW5lLWhlaWdodDogMi41cmVtO1xuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgY3Vyc29yOiBkZWZhdWx0OyB9XG4gICAgLm15X2RvY3VtZW50c193aWRnZXQgaDI6YmVmb3JlIHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHRvcDogNTAlO1xuICAgICAgbGVmdDogMDtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgICAgIG1hcmdpbjogMHB4IDBweCAwcHggLTQwcHg7XG4gICAgICBtYXJnaW46IDByZW0gMHJlbSAwcmVtIC0yLjVyZW07IH1cbiAgICAubXlfZG9jdW1lbnRzX3dpZGdldCBoMjphZnRlciB7XG4gICAgICBkaXNwbGF5OiBub25lOyB9XG4gIC5teV9kb2N1bWVudHNfd2lkZ2V0IGRsLnJvdy1mbHVpZCA+IGR0IHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBmb250LXNpemU6IDE3cHg7XG4gICAgZm9udC1zaXplOiAxLjA2MjVyZW07IH1cbiAgLm15X2RvY3VtZW50c193aWRnZXQgZGwucm93LWZsdWlkIGRkOmZpcnN0LWNoaWxkIGE6YmVmb3JlIHtcbiAgICBwYWRkaW5nLXJpZ2h0OiAxMHB4O1xuICAgIHBhZGRpbmctcmlnaHQ6IDAuNjI1cmVtOyB9IH1cblxuLmNvbW11bmljYXRpb25fcHJlZmVyZW5jZXMgZGwudGFibGUucm93LWZsdWlkID4gZHQge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtaW4td2lkdGg6IDEwMCU7XG4gIGZvbnQtZmFtaWx5OiAnc2VudGljb3NhbnNkdHJlZ3VsYXInLCBBcmlhbCwgVmVyZGFuYSwgc2Fucy1zZXJpZjtcbiAgcGFkZGluZy1yaWdodDogMjJweDtcbiAgcGFkZGluZy1yaWdodDogMS4zNzVyZW07IH1cbi5jb21tdW5pY2F0aW9uX3ByZWZlcmVuY2VzIGRsLnRhYmxlLnJvdy1mbHVpZCA+IGRkIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbi1sZWZ0OiAwOyB9XG4uY29tbXVuaWNhdGlvbl9wcmVmZXJlbmNlcyBzcGFuLmljb24tcXVlc3Rpb25tYXJrIHtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIGN1cnNvcjogZGVmYXVsdDtcbiAgZm9udC1mYW1pbHk6ICdhZWdvbl9pY29ucyc7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgZm9udC1zaXplOiAxcmVtO1xuICBjb2xvcjogIzAwMzA0YzsgfVxuLmNvbW11bmljYXRpb25fcHJlZmVyZW5jZXMgc3Bhblt0b29sdGlwXSB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDA7XG4gIHdpZHRoOiAyMHB4O1xuICB3aWR0aDogMS4yNXJlbTtcbiAgdGV4dC1hbGlnbjogY2VudGVyOyB9XG4gIC5jb21tdW5pY2F0aW9uX3ByZWZlcmVuY2VzIHNwYW5bdG9vbHRpcF06YmVmb3JlIHtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgb3BhY2l0eTogMDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAxNXB4O1xuICAgIHRvcDogMC45Mzc1cmVtO1xuICAgIGxlZnQ6IDAlO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHdpZHRoOiAwO1xuICAgIGhlaWdodDogMDtcbiAgICBjb250ZW50OiAnJztcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAgIGJvcmRlci13aWR0aDogMTBweDtcbiAgICBib3JkZXItd2lkdGg6IDAuNjI1cmVtO1xuICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgIzk5Q0FFOSB0cmFuc3BhcmVudDtcbiAgICB0cmFuc2l0aW9uOiAuMXMgYWxsIC4zczsgfVxuICAuY29tbXVuaWNhdGlvbl9wcmVmZXJlbmNlcyBzcGFuW3Rvb2x0aXBdOmFmdGVyIHtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgb3BhY2l0eTogMDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAzM3B4O1xuICAgIHRvcDogMi4wNjI1cmVtO1xuICAgIHJpZ2h0OiAtMTBweDtcbiAgICByaWdodDogLTAuNjI1cmVtO1xuICAgIGZvbnQtZmFtaWx5OiAnc2VudGljb3NhbnNkdGxpZ2h0JywgQXJpYWwsIFZlcmRhbmEsIHNhbnMtc2VyaWY7XG4gICAgY29udGVudDogYXR0cih0b29sdGlwKTtcbiAgICBmb250LXNpemU6IDE0cHg7XG4gICAgY29sb3I6ICMxZDFkMWI7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICBwYWRkaW5nOiAxMnB4O1xuICAgIHBhZGRpbmc6IDAuNzVyZW07XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgd2lkdGg6IDMwMHB4O1xuICAgIHotaW5kZXg6IDU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzk5Q0FFOTtcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgYm9yZGVyLXJhZGl1czogMC4xODc1cmVtO1xuICAgIHRyYW5zaXRpb246IC4xcyBhbGwgLjNzOyB9XG4gIC5jb21tdW5pY2F0aW9uX3ByZWZlcmVuY2VzIHNwYW5bdG9vbHRpcF06aG92ZXI6YmVmb3JlLCAuY29tbXVuaWNhdGlvbl9wcmVmZXJlbmNlcyBzcGFuW3Rvb2x0aXBdOmhvdmVyOmFmdGVyIHtcbiAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xuICAgIG9wYWNpdHk6IDE7XG4gICAgdHJhbnNpdGlvbjogLjFzIGFsbCAwczsgfVxuLmNvbW11bmljYXRpb25fcHJlZmVyZW5jZXMgbGFiZWwuY2hlY2tib3gge1xuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgbWFyZ2luLWJvdHRvbTogMC42MjVyZW07IH1cbiAgLmNvbW11bmljYXRpb25fcHJlZmVyZW5jZXMgbGFiZWwuY2hlY2tib3ggPiBpbnB1dFt0eXBlPSdjaGVja2JveCddICsgc3Bhbi5jaGVja2JveCB7XG4gICAgdG9wOiAwO1xuICAgIGxlZnQ6IDA7IH1cbi5jb21tdW5pY2F0aW9uX3ByZWZlcmVuY2VzIGJ1dHRvbi5lZGl0LnJpZ2h0IHtcbiAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7IH1cblxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2NDFweCkge1xuICAuY29tbXVuaWNhdGlvbl9wcmVmZXJlbmNlcyBkbC50YWJsZS5yb3ctZmx1aWQgPiBkdCwgLmNvbW11bmljYXRpb25fcHJlZmVyZW5jZXMgZGwudGFibGUucm93LWZsdWlkID4gZGQge1xuICAgIGRpc3BsYXk6IHRhYmxlLWNlbGw7XG4gICAgbWluLXdpZHRoOiBpbmhlcml0OyB9XG4gICAgLmNvbW11bmljYXRpb25fcHJlZmVyZW5jZXMgZGwudGFibGUucm93LWZsdWlkID4gZHQudG9wIHNwYW5bdG9vbHRpcF0sIC5jb21tdW5pY2F0aW9uX3ByZWZlcmVuY2VzIGRsLnRhYmxlLnJvdy1mbHVpZCA+IGRkLnRvcCBzcGFuW3Rvb2x0aXBdIHtcbiAgICAgIHRvcDogMDtcbiAgICAgIG1hcmdpbi10b3A6IDA7IH1cbiAgLmNvbW11bmljYXRpb25fcHJlZmVyZW5jZXMgZGwudGFibGUucm93LWZsdWlkID4gZGQge1xuICAgIHBhZGRpbmctbGVmdDogMTZweDtcbiAgICBwYWRkaW5nLWxlZnQ6IDFyZW07IH1cbiAgLmNvbW11bmljYXRpb25fcHJlZmVyZW5jZXMgc3Bhblt0b29sdGlwXSB7XG4gICAgdG9wOiA1MCU7XG4gICAgbWFyZ2luLXRvcDogLTEyLjVweDtcbiAgICBtYXJnaW4tdG9wOiAtMC43ODEyNXJlbTsgfVxuICAgIC5jb21tdW5pY2F0aW9uX3ByZWZlcmVuY2VzIHNwYW5bdG9vbHRpcF06YmVmb3JlIHtcbiAgICAgIHRvcDogMTVweDtcbiAgICAgIGxlZnQ6IDAlOyB9XG4gICAgLmNvbW11bmljYXRpb25fcHJlZmVyZW5jZXMgc3Bhblt0b29sdGlwXTphZnRlciB7XG4gICAgICBsZWZ0OiAtMTUwcHg7XG4gICAgICB0b3A6IDMzcHg7IH0gfVxuXG4vKiBBbGwgbGlicmFyeSB3aWRnZXRzIGFuZCBzcGVjaWZpYyBtb2R1bGVzICovXG4udXNlcl9kZXRhaWxfd2lkZ2V0IHtcbiAgZGlzcGxheTogbm9uZTtcbiAgZmxvYXQ6IHJpZ2h0O1xuICB6LWluZGV4OiAwO1xuICAvKipcbiAgICogRW5kIGFuaW1hdGlvbiB3aXRoIGpRdWVyeSBzdXBwb3J0XG4gICAqLyB9XG4gIC51c2VyX2RldGFpbF93aWRnZXQgLmlucGxhY2Uge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgZmxvYXQ6IHJpZ2h0O1xuICAgIG1hcmdpbjogMDtcbiAgICBoZWlnaHQ6IDM2cHg7IH1cbiAgICAudXNlcl9kZXRhaWxfd2lkZ2V0IC5pbnBsYWNlIC5idG4tbG9naW4tbG9nZ2VkaW4ge1xuICAgICAgei1pbmRleDogMjtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIHRvcDogMHB4O1xuICAgICAgcmlnaHQ6IDBweDsgfVxuICAudXNlcl9kZXRhaWxfd2lkZ2V0ID4gLnRleHQge1xuICAgIGRpc3BsYXk6IG5vbmU7IH1cbiAgLnVzZXJfZGV0YWlsX3dpZGdldCBsYWJlbCB7XG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDsgfVxuICAudXNlcl9kZXRhaWxfd2lkZ2V0IGlucHV0I1VEV19kZF9zaG93IHtcbiAgICBkaXNwbGF5OiBub25lOyB9XG4gICAgLnVzZXJfZGV0YWlsX3dpZGdldCBpbnB1dCNVRFdfZGRfc2hvdzpjaGVja2VkIH4gLmRyb3Bkb3duIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrOyB9XG4gICAgLnVzZXJfZGV0YWlsX3dpZGdldCBpbnB1dCNVRFdfZGRfc2hvdzpjaGVja2VkIH4gLmJ0bi1sb2dpbi1sb2dnZWRpbjphZnRlciB7XG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpOyB9XG4gIC51c2VyX2RldGFpbF93aWRnZXQgLmRyb3Bkb3duIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICAgIHotaW5kZXg6IDE7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogYXV0bztcbiAgICByaWdodDogMDtcbiAgICBtYXJnaW4tdG9wOiAtMXB4O1xuICAgIG1hcmdpbi10b3A6IC0wLjA2MjVyZW07XG4gICAgd2lkdGg6IDI4MHB4O1xuICAgIHdpZHRoOiAxNy41cmVtO1xuICAgIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgICBib3JkZXItcmFkaXVzOiAwLjEyNXJlbTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNlMGUwZTA7XG4gICAgYm94LXNoYWRvdzogMCAxcHggMHB4IHJnYmEoMCwgMCwgMCwgMC4zKTsgfVxuICAgIC51c2VyX2RldGFpbF93aWRnZXQgLmRyb3Bkb3duIC50ZXh0IHtcbiAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xuICAgICAgdGV4dC1vdmVyZmxvdzogaW5pdGlhbDtcbiAgICAgIG92ZXJmbG93OiBpbml0aWFsOyB9XG4gICAgICAudXNlcl9kZXRhaWxfd2lkZ2V0IC5kcm9wZG93biAudGV4dCBwIHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIHBhZGRpbmc6IDBweCAxMnB4O1xuICAgICAgICBwYWRkaW5nOiAwcmVtIDAuNzVyZW07XG4gICAgICAgIG1hcmdpbjogMThweCAwcHg7XG4gICAgICAgIG1hcmdpbjogMS4xMjVyZW0gMHJlbTsgfVxuICAgICAgLnVzZXJfZGV0YWlsX3dpZGdldCAuZHJvcGRvd24gLnRleHQgcC5uYW1lIHtcbiAgICAgICAgcGFkZGluZzogMHB4IDIwcHg7XG4gICAgICAgIHBhZGRpbmc6IDByZW0gMS4yNXJlbTtcbiAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgY29sb3I6ICM0OWFmNTc7IH1cbiAgICAgICAgLnVzZXJfZGV0YWlsX3dpZGdldCAuZHJvcGRvd24gLnRleHQgcC5uYW1lOmJlZm9yZSB7XG4gICAgICAgICAgY29udGVudDogXCJcXGU2MzZcIjtcbiAgICAgICAgICBmb250LWZhbWlseTogJ2FlZ29uX2ljb25zJztcbiAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgZm9udC1zaXplOiAyM3B4O1xuICAgICAgICAgIGZvbnQtc2l6ZTogMS40Mzc1cmVtO1xuICAgICAgICAgIG1hcmdpbi1yaWdodDogMTJweDtcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDAuNzVyZW07XG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDNweCk7IH1cbiAgICAgIC51c2VyX2RldGFpbF93aWRnZXQgLmRyb3Bkb3duIC50ZXh0IC5hY3Rpb24ge1xuICAgICAgICBwYWRkaW5nOiAwcHggMTJweDtcbiAgICAgICAgcGFkZGluZzogMHJlbSAwLjc1cmVtO1xuICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwOyB9XG4gIC51c2VyX2RldGFpbF93aWRnZXQgLmhpZ2hsaWdodCB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzQ5YWY1NzsgfVxuICAgIC51c2VyX2RldGFpbF93aWRnZXQgLmhpZ2hsaWdodC5oYXMtYmVlbi1zaG93bi5kZXNrdG9wLCAudXNlcl9kZXRhaWxfd2lkZ2V0IC5oaWdobGlnaHQuaGFzLWJlZW4tc2hvd24ubW9iaWxlIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7IH1cbiAgICAudXNlcl9kZXRhaWxfd2lkZ2V0IC5oaWdobGlnaHQuZGVza3RvcCB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgdG9wOiAwO1xuICAgICAgcmlnaHQ6IDA7XG4gICAgICBib3R0b206IDA7XG4gICAgICBsZWZ0OiAwO1xuICAgICAgei1pbmRleDogMDtcbiAgICAgIHBhZGRpbmc6IDIzcHggMHB4O1xuICAgICAgcGFkZGluZzogMS40Mzc1cmVtIDByZW07XG4gICAgICBhbmltYXRpb246IHNsaWRpbmdIaWdobGlnaHRPblRvcCAxcyAxIDNzIGZvcndhcmRzOyB9XG4gICAgLnVzZXJfZGV0YWlsX3dpZGdldCAuaGlnaGxpZ2h0Lm1vYmlsZSB7XG4gICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICBmb250LXNpemU6IDFyZW07XG4gICAgICBtYXJnaW46IDBweCAxMnB4O1xuICAgICAgbWFyZ2luOiAwcmVtIDAuNzVyZW07XG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICBhbmltYXRpb246IHNsaWRpbmdIaWdobGlnaHRPblRvcE1vYmlsZSAxcyAxIDNzIGZvcndhcmRzO1xuICAgICAgbWF4LWhlaWdodDogNTAwcHg7IH1cbiAgICAgIC51c2VyX2RldGFpbF93aWRnZXQgLmhpZ2hsaWdodC5tb2JpbGUgLnRleHQge1xuICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDlhZjU3OyB9XG4gICAgICAgIC51c2VyX2RldGFpbF93aWRnZXQgLmhpZ2hsaWdodC5tb2JpbGUgLnRleHQgcCB7XG4gICAgICAgICAgcGFkZGluZzogMTJweDtcbiAgICAgICAgICBwYWRkaW5nOiAwLjc1cmVtO1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgICAgICAgY29sb3I6ICNmZmZmZmY7IH1cbiAgICAudXNlcl9kZXRhaWxfd2lkZ2V0IC5oaWdobGlnaHQgc3Ryb25nIHtcbiAgICAgIGZvbnQtZmFtaWx5OiAnc2VudGljb3NhbnNkdHJlZ3VsYXInLCBBcmlhbCwgVmVyZGFuYSwgc2Fucy1zZXJpZjtcbiAgICAgIGZvbnQtd2VpZ2h0OiAzMDA7IH1cbiAgLnVzZXJfZGV0YWlsX3dpZGdldCAuYnRuLWxvZ2luLWxvZ2dlZGluIHtcbiAgICBwYWRkaW5nOiAwcHggMTBweCAxcHggMTBweDtcbiAgICBwYWRkaW5nOiAwcmVtIDAuNjI1cmVtIDAuMDYyNXJlbSAwLjYyNXJlbTtcbiAgICBsaW5lLWhlaWdodDogMzZweDtcbiAgICBsaW5lLWhlaWdodDogMi4yNXJlbTtcbiAgICBoZWlnaHQ6IGF1dG87XG4gICAgcGFkZGluZy1ib3R0b206IDZweDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDAuMTI1cmVtO1xuICAgIHVzZXItc2VsZWN0OiBub25lO1xuICAgIG91dGxpbmU6IDA7XG4gICAgZm9udC1mYW1pbHk6ICdzZW50aWNvc2Fuc2R0cmVndWxhcicsIEFyaWFsLCBWZXJkYW5hLCBzYW5zLXNlcmlmO1xuICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICBmb250LXNpemU6IDFyZW07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjtcbiAgICBib3JkZXItd2lkdGg6IDFweDtcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAgIGJvcmRlci1jb2xvcjogI2UwZTBlMDtcbiAgICBib3JkZXItYm90dG9tLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICBjb2xvcjogIzQ5YWY1NzsgfVxuICAgIC51c2VyX2RldGFpbF93aWRnZXQgLmJ0bi1sb2dpbi1sb2dnZWRpbjphZnRlciB7XG4gICAgICBmb250LWZhbWlseTogJ2FlZ29uX2ljb25zJztcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgIGZvbnQtc2l6ZTogMC43NXJlbTtcbiAgICAgIGNvbnRlbnQ6IFwiXFxlNjMwXCI7XG4gICAgICBtYXJnaW4tbGVmdDogNnB4O1xuICAgICAgbWFyZ2luLWxlZnQ6IDAuMzc1cmVtOyB9XG4gICAgLnVzZXJfZGV0YWlsX3dpZGdldCAuYnRuLWxvZ2luLWxvZ2dlZGluLnRhcCB7XG4gICAgICBib3JkZXItYm90dG9tLWNvbG9yOiAjZTBlMGUwO1xuICAgICAgcGFkZGluZy1ib3R0b206IDA7IH1cbiAgICAgIC51c2VyX2RldGFpbF93aWRnZXQgLmJ0bi1sb2dpbi1sb2dnZWRpbi50YXAgfiAuZHJvcGRvd24ge1xuICAgICAgICBkaXNwbGF5OiBub25lOyB9XG4gICAgLnVzZXJfZGV0YWlsX3dpZGdldCAuYnRuLWxvZ2luLWxvZ2dlZGluLm9mZiwgLnVzZXJfZGV0YWlsX3dpZGdldCAuYnRuLWxvZ2luLWxvZ2dlZGluLm9mZjphZnRlciB7XG4gICAgICBhbmltYXRpb246IG5vbmU7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmOyB9XG4gICAgLnVzZXJfZGV0YWlsX3dpZGdldCAuYnRuLWxvZ2luLWxvZ2dlZGluOmhvdmVyIHtcbiAgICAgIG9wYWNpdHk6IGluaXRpYWw7IH1cbiAgLnVzZXJfZGV0YWlsX3dpZGdldC5wcm9jZXNzZWQgLmhpZ2hsaWdodC5kZXNrdG9wIHtcbiAgICBkaXNwbGF5OiBub25lOyB9XG4gIC51c2VyX2RldGFpbF93aWRnZXQucHJvY2Vzc2VkIC5oaWdobGlnaHQubW9iaWxlIHtcbiAgICBkaXNwbGF5OiBub25lOyB9XG4gIC51c2VyX2RldGFpbF93aWRnZXQucHJvY2Vzc2VkID4gLnRleHQge1xuICAgIG9wYWNpdHk6IDE7IH1cbiAgLnVzZXJfZGV0YWlsX3dpZGdldC5wcm9jZXNzZWQgLmJ0bi1sb2dpbi1sb2dnZWRpbiwgLnVzZXJfZGV0YWlsX3dpZGdldC5wcm9jZXNzZWQgLmJ0bi1sb2dpbi1sb2dnZWRpbjphZnRlciB7XG4gICAgYW5pbWF0aW9uOiBub25lOyB9XG5cbmh0bWwubHQtaWU5IC51c2VyX2RldGFpbF93aWRnZXQgPiAudGV4dCB7XG4gIG9wYWNpdHk6IDEgIWltcG9ydGFudDsgfVxuXG5ib2R5LnNlY3Rpb24tbWlqbmFlZ29uIC5teWFlZ29uIHtcbiAgZGlzcGxheTogbm9uZTsgfVxuXG5ib2R5LnNody13aWRnZXRzLWxvZ2dlZC1pbiBoZWFkZXIuaGVhZGVyIC5sb2dpbi1saW5rLXdyYXBwZXIsIGJvZHkuc2h3LXdpZGdldHMtbG9nZ2VkLWluIC5saW5rLWxvZ2dlZC1pbiBhIHtcbiAgZGlzcGxheTogbm9uZTsgfVxuYm9keS5zaHctd2lkZ2V0cy1sb2dnZWQtaW4gLnVzZXJfZGV0YWlsX3dpZGdldCwgYm9keS5zaHctd2lkZ2V0cy1sb2dnZWQtaW4gLmxpbmstbG9nZ2VkLWluIC5saW5rLWFsdGVybmF0aXZlIGEge1xuICBkaXNwbGF5OiBibG9jazsgfVxuXG4ubGluay1hbHRlcm5hdGl2ZSBhIHtcbiAgZGlzcGxheTogbm9uZTsgfVxuXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDY0MXB4KSB7XG4gIC51c2VyX2RldGFpbF93aWRnZXQgPiAudGV4dCB7XG4gICAgbGluZS1oZWlnaHQ6IDQ0cHg7XG4gICAgbGluZS1oZWlnaHQ6IDIuNzVyZW07IH1cbiAgLnVzZXJfZGV0YWlsX3dpZGdldCAudGV4dCBwLm5hbWUge1xuICAgIGRpc3BsYXk6IGlubGluZTtcbiAgICBwYWRkaW5nOiAwcHggMjVweCAwcHggMHB4O1xuICAgIHBhZGRpbmc6IDByZW0gMS41NjI1cmVtIDByZW0gMHJlbTtcbiAgICBjb2xvcjogIzQ5YWY1NzsgfVxuICAudXNlcl9kZXRhaWxfd2lkZ2V0IC5kcm9wZG93biB7XG4gICAgZGlzcGxheTogbm9uZTsgfVxuICAgIC51c2VyX2RldGFpbF93aWRnZXQgLmRyb3Bkb3duIC50ZXh0IHAubmFtZSB7XG4gICAgICBkaXNwbGF5OiBub25lOyB9XG4gIC51c2VyX2RldGFpbF93aWRnZXQgLmhpZ2hsaWdodC5kZXNrdG9wIHtcbiAgICBkaXNwbGF5OiBibG9jazsgfVxuICAgIC51c2VyX2RldGFpbF93aWRnZXQgLmhpZ2hsaWdodC5kZXNrdG9wIC50ZXh0IHtcbiAgICAgIG1hcmdpbjogMDtcbiAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgICBsaW5lLWhlaWdodDogNDRweDtcbiAgICAgIGxpbmUtaGVpZ2h0OiAyLjc1cmVtO1xuICAgICAgcGFkZGluZy1yaWdodDogMTcwcHg7XG4gICAgICBwYWRkaW5nLXJpZ2h0OiAxMC42MjVyZW07XG4gICAgICBtYXJnaW4tbGVmdDogNy4zJTtcbiAgICAgIG1hcmdpbi1yaWdodDogNy4zJTtcbiAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICBjb2xvcjogI2ZmZmZmZjsgfVxuICAgICAgLnVzZXJfZGV0YWlsX3dpZGdldCAuaGlnaGxpZ2h0LmRlc2t0b3AgLnRleHQgLndlbGNvbWUge1xuICAgICAgICBmb250LWZhbWlseTogJ3NlbnRpY29zYW5zZHRyZWd1bGFyJywgQXJpYWwsIFZlcmRhbmEsIHNhbnMtc2VyaWY7IH1cbiAgICAgIC51c2VyX2RldGFpbF93aWRnZXQgLmhpZ2hsaWdodC5kZXNrdG9wIC50ZXh0IHAge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmU7IH1cbiAgLnVzZXJfZGV0YWlsX3dpZGdldCAuaGlnaGxpZ2h0Lm1vYmlsZSB7XG4gICAgZGlzcGxheTogbm9uZTsgfVxuICAudXNlcl9kZXRhaWxfd2lkZ2V0IC5idG4tbG9naW4tbG9nZ2VkaW4ge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBwYWRkaW5nOiAwcHggMTNweCAycHggMTNweDtcbiAgICBwYWRkaW5nOiAwcmVtIDAuODEyNXJlbSAwLjEyNXJlbSAwLjgxMjVyZW07XG4gICAgbGluZS1oZWlnaHQ6IDM2cHg7XG4gICAgbGluZS1oZWlnaHQ6IDIuMjVyZW07XG4gICAgZm9udC1zaXplOiBpbmhlcml0O1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIGJvcmRlci1ib3R0b20tY29sb3I6ICNlMGUwZTA7XG4gICAgYW5pbWF0aW9uOiBidXR0b25Mb2dpblRvRGVmYXVsdCA0cyBub3JtYWwgMHMgZm9yd2FyZHM7IH1cbiAgICAudXNlcl9kZXRhaWxfd2lkZ2V0IC5idG4tbG9naW4tbG9nZ2VkaW46YmVmb3JlIHtcbiAgICAgIGNvbnRlbnQ6ICdcXGU2MzYnO1xuICAgICAgZm9udC1mYW1pbHk6ICdhZWdvbl9pY29ucyc7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICBmb250LXNpemU6IDIzcHg7XG4gICAgICBmb250LXNpemU6IDEuNDM3NXJlbTtcbiAgICAgIG1hcmdpbi1yaWdodDogMTJweDtcbiAgICAgIG1hcmdpbi1yaWdodDogMC43NXJlbTtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgzcHgpOyB9XG4gICAgLnVzZXJfZGV0YWlsX3dpZGdldCAuYnRuLWxvZ2luLWxvZ2dlZGluOmFmdGVyIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIGFuaW1hdGlvbjogYnV0dG9uQWZ0ZXJMb2dpblRvRGVmYXVsdCA0cyBub3JtYWwgMHMgZm9yd2FyZHM7IH1cbiAgICAudXNlcl9kZXRhaWxfd2lkZ2V0IC5idG4tbG9naW4tbG9nZ2VkaW4udGFwIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XG4gICAgICBib3JkZXItYm90dG9tLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgIHBhZGRpbmctYm90dG9tOiAwcHg7IH1cbiAgICAgIC51c2VyX2RldGFpbF93aWRnZXQgLmJ0bi1sb2dpbi1sb2dnZWRpbi50YXAgfiAuZHJvcGRvd24ge1xuICAgICAgICBkaXNwbGF5OiBibG9jazsgfVxuICAgIC51c2VyX2RldGFpbF93aWRnZXQgLmJ0bi1sb2dpbi1sb2dnZWRpbi5pZUNoYW5nZUNvbG9ycyB7XG4gICAgICBjb2xvcjogI2ZmZmZmZjsgfVxuICAgICAgLnVzZXJfZGV0YWlsX3dpZGdldCAuYnRuLWxvZ2luLWxvZ2dlZGluLmllQ2hhbmdlQ29sb3JzOmFmdGVyIHtcbiAgICAgICAgYm9yZGVyLWNvbG9yOiAjZmZmZmZmOyB9IH1cblxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA5MDFweCkge1xuICAudXNlcl9kZXRhaWxfd2lkZ2V0ID4gLnRleHQge1xuICAgIGZsb2F0OiBsZWZ0O1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBvcGFjaXR5OiAxO1xuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgLjE1czsgfSB9XG5cbkBrZXlmcmFtZXMgYnV0dG9uTG9naW5Ub0RlZmF1bHQge1xuICAwJSwgNzUlIHtcbiAgICBib3JkZXItY29sb3I6ICNmZmZmZmY7XG4gICAgY29sb3I6ICNmZmZmZmY7IH1cblxuICAxMDAlIHtcbiAgICBib3JkZXItY29sb3I6ICNlMGUwZTA7XG4gICAgY29sb3I6ICM0OWFmNTc7IH0gfVxuXG5Aa2V5ZnJhbWVzIGJ1dHRvbkFmdGVyTG9naW5Ub0RlZmF1bHQge1xuICAwJSwgNzUlIHtcbiAgICBib3JkZXItY29sb3I6ICNmZmZmZmY7IH1cblxuICAxMDAlIHtcbiAgICBib3JkZXItY29sb3I6ICM0OWFmNTc7IH0gfVxuXG5Aa2V5ZnJhbWVzIHNsaWRpbmdIaWdobGlnaHRPblRvcCB7XG4gIGZyb20ge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwJSk7IH1cblxuICB0byB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMjAlKTsgfSB9XG5cbkBrZXlmcmFtZXMgc2xpZGluZ0hpZ2hsaWdodE9uVG9wTW9iaWxlIHtcbiAgZnJvbSB7XG4gICAgbWF4LWhlaWdodDogNTAwcHg7IH1cblxuICB0byB7XG4gICAgbWF4LWhlaWdodDogMHB4OyB9IH1cblxuLmhpZGUtaWYtc2h3LWxvZ2dlZG91dCB7XG4gIGRpc3BsYXk6IG5vbmU7IH1cblxuLnNody13aWRnZXRzLWxvZ2dlZC1pbiAuc2hvdy1pZi1zaHctbG9nZ2VkaW4sIC5zaHctd2lkZ2V0cy1sb2dnZWQtaW4gLmhpZGUtaWYtc2h3LWxvZ2dlZG91dCB7XG4gIGRpc3BsYXk6IGlubGluZTsgfVxuICAuc2h3LXdpZGdldHMtbG9nZ2VkLWluIC5zaG93LWlmLXNody1sb2dnZWRpbi5pbmxpbmUsIC5zaHctd2lkZ2V0cy1sb2dnZWQtaW4gLmhpZGUtaWYtc2h3LWxvZ2dlZG91dC5pbmxpbmUge1xuICAgIGRpc3BsYXk6IGlubGluZTsgfVxuICAuc2h3LXdpZGdldHMtbG9nZ2VkLWluIC5zaG93LWlmLXNody1sb2dnZWRpbi5pbmxpbmUtYmxvY2ssIC5zaHctd2lkZ2V0cy1sb2dnZWQtaW4gLmhpZGUtaWYtc2h3LWxvZ2dlZG91dC5pbmxpbmUtYmxvY2sge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgfVxuICAuc2h3LXdpZGdldHMtbG9nZ2VkLWluIC5zaG93LWlmLXNody1sb2dnZWRpbi5ibG9jaywgLnNody13aWRnZXRzLWxvZ2dlZC1pbiAuaGlkZS1pZi1zaHctbG9nZ2Vkb3V0LmJsb2NrIHtcbiAgICBkaXNwbGF5OiBibG9jazsgfVxuLnNody13aWRnZXRzLWxvZ2dlZC1pbiAuaGlkZS1pZi1zaHctbG9nZ2VkaW4ge1xuICBkaXNwbGF5OiBub25lOyB9XG5cbi8qIEdyb3VwcyBvZiB0b29sa2l0IGNvcmUgZmlsZXNcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4uc2xpZGluZy1wb3B1cC10b3Age1xuICBkaXNwbGF5OiBub25lOyB9XG5cbiIsIlxuLy9cbi8vIE1peGluc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiBSZW1vdmUgdGhlIHVuaXQgb2YgYSBsZW5ndGhcbiAqIEBwYXJhbSB7TnVtYmVyfSAkbnVtYmVyIC0gTnVtYmVyIHRvIHJlbW92ZSB1bml0IGZyb21cbiAqIEByZXR1cm4ge051bWJlcn0gLSBVbml0bGVzcyBudW1iZXJcbiAqL1xuXG5AZnVuY3Rpb24gc3RyaXAtdW5pdCgkbnVtYmVyKSB7XG4gIEBpZiB0eXBlLW9mKCRudW1iZXIpID09ICdudW1iZXInIGFuZCBub3QgdW5pdGxlc3MoJG51bWJlcikge1xuICAgIEByZXR1cm4gJG51bWJlciAvICgkbnVtYmVyICogMCArIDEpO1xuICB9XG5cbiAgQHJldHVybiAkbnVtYmVyO1xufVxuXG4vKipcbiAqIE1peGluIGNvbnZlcnRlciBmb3IgUGl4ZWwgdG8gUkVNLCBwbHVzIGZhbGxiYWNrIGluIHBpeGVsIGZvciBvbGRlciBicm93c2VyXG4gKiBAcGFyYW0gIHtmbG9hdH0gICRwcm9wZXJ0eSAgTmFtZSBvZiBwcm9wZXJ0eVxuICogQHBhcmFtICB7W3R5cGVdfSAkdmFsdWVzLi4uIFRvcCwgUmlnaHQsIEJvdHRvbSwgTGVmdCBwaXhlbCB2YWx1ZXNcbiAqIEByZXR1cm4ge2Nzc30gICAgUHJvcGVydHkgY29udmVydGVkIGluIFJFTSBhbmQgZmFsbGJhY2tcbiAqXG4gKiBFeGFtcGxlOiBAaW5jbHVkZSgncGFkZGluZycsIC41LCAuNSwgLjE1LCAuMTUpO1xuICovXG5AbWl4aW4gcmVtKCRwcm9wZXJ0eSwgJHZhbHVlcy4uLikge1xuICAkYmFzZV9waXhlbF9zaXplOiAxNnB4O1xuICAkbWF4OiBsZW5ndGgoJHZhbHVlcyk7XG4gICRweFZhbHVlczogJyc7XG4gICRyZW1WYWx1ZXM6ICcnO1xuXG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggJG1heCB7XG5cbiAgICBAaWYgbnRoKCR2YWx1ZXMsICRpKSAhPSAnaW1wb3J0YW50JyB7XG5cbiAgICAgICR2YWx1ZTogbnRoKCR2YWx1ZXMsICRpKTtcbiAgICAgICR2YWx1ZTogc3RyaXAtdW5pdCgkdmFsdWUpO1xuXG4gICAgICAkcmVtVmFsOiAoJHZhbHVlIC8gMTYpO1xuICAgICAgJHB4VmFsdWVzOiAjeyRweFZhbHVlcyArICR2YWx1ZX1weDtcbiAgICAgICRyZW1WYWx1ZXM6ICN7JHJlbVZhbHVlcyArICRyZW1WYWx9cmVtO1xuICAgIH1cblxuICAgIEBpZiAkaSA8ICRtYXgge1xuICAgICAgJHB4VmFsdWVzOiAjeyRweFZhbHVlcyArIFwiIFwifTtcbiAgICAgICRyZW1WYWx1ZXM6ICN7JHJlbVZhbHVlcyArIFwiIFwifTtcbiAgICB9XG5cbiAgICBAaWYgJGkgPT0gJG1heCB7XG4gICAgICBAaWYgbnRoKCR2YWx1ZXMsICRpKSA9PSAnaW1wb3J0YW50JyB7XG4gICAgICAgICRweFZhbHVlczogI3skcHhWYWx1ZXMgKyBcIiAhaW1wb3J0YW50XCJ9O1xuICAgICAgICAkcmVtVmFsdWVzOiAjeyRyZW1WYWx1ZXMgKyBcIiAhaW1wb3J0YW50XCJ9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICN7JHByb3BlcnR5fTogJHB4VmFsdWVzO1xuICAjeyRwcm9wZXJ0eX06ICRyZW1WYWx1ZXM7XG59XG5cbi8qKlxuICogQnViYmxlXG4gKiBAcGFyYW0gIHtbdHlwZV19ICR3aWR0aDogICAgICAgICAgICAxMHB4ICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge1t0eXBlXX0gJGJvcmRlcjogICAgICAgICAgIDJweCAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7W3R5cGVdfSAkcXVhZHJhbnQ6ICAgICAgICAgMCAgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtbdHlwZV19ICR0b3A6ICAgICAgICAgICAgICBcIlwiICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7W3R5cGVdfSAkcmlnaHQ6ICAgICAgICAgICAgXCJcIiAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAqIEBwYXJhbSAge1t0eXBlXX0gJGJvdHRvbTogICAgICAgICAgIFwiXCIgICAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtbdHlwZV19ICRsZWZ0OiAgICAgICAgICAgICBcIlwiICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICogQHBhcmFtICB7W3R5cGVdfSAkYm9yZGVyLWNvbG9yOiAgICAgd2hpdGUgICAgICAgICBbZGVzY3JpcHRpb25dXG4gKiBAcGFyYW0gIHtbdHlwZV19ICRiYWNrZ3JvdW5kLWNvbG9yOiBncmV5ICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm4ge1t0eXBlXX0gICAgICAgICAgICAgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAqL1xuQG1peGluIGJ1YmJsZSAoJHdpZHRoOiAxMHB4LCAkYm9yZGVyOiAycHgsICRxdWFkcmFudDogMCwgJHRvcDogXCJcIiwgJHJpZ2h0OiBcIlwiLCAkYm90dG9tOiBcIlwiLCAkbGVmdDogXCJcIiwgJGJvcmRlci1jb2xvcjogd2hpdGUsICRiYWNrZ3JvdW5kLWNvbG9yOiBncmV5KSB7IC8vY3JlYXRlcyBhIGJ1YmJsZSBub3NlIG9uIGEgZnJhbWVcbiAgLy8kcXVhZHJhbnQgd29ya3MgbGlrZSB0aGUgY29vcmRpbmF0ZXMgaW4gYm9yZGVyIDAgPSB0b3AsIDEgPSBsZWZ0LCAyID0gYm90dG9tLCAzID0gcmlnaHRcbiAgLy9vZmZzZXQgdmFsdWVzIHJpZ2h0LCBsZWZ0LCB0b3AgYW5kIGJvdHRvbSBpbmRpY2F0ZSB0aGUgZGlzdGFuY2UgZnJvbSBvbmUgb2YgdGhlIGV4dHJlbWVzXG4gIC8vb2YgdGhlIHF1YWRyYW50LCB0aHVzXG4gIC8vJHF1YWRyYW50OiAwIGFuZCAkcmlnaHQ6IDIwcHg7XG4gIC8vbWVhbnMgdGhhdCB0aGUgYnViYmxlIG5vc2UgaXMgb24gdGhlIHRvcCBhbmQgMjBweCBmcm9tIHRoZSByaWdodFxuICAvL2l0IHNob3VsZCBiZSBzZWxmLWV2aWRlbnQgdGhhdCBub25zZW5zaWNhbCBjb21iaW5hdGlvbnMgc3VjaCBhc1xuICAvLyRxdWFkcmFudDogMCAodG9wKSBhbmQgJGJvdHRvbTogMjBweFxuICAvL3dpbGwgcHJvZHVjZSBub25zZW5zaWNhbCByZXN1bHRzLCBzbyBxdWFkcmFudFxuICAvLzAgb3IgMiB3aWxsIG9ubHkgd29yayB3aXRoIEVJVEhFUiBsZWZ0IG9yIHJpZ2h0XG4gIC8vYW5kIDEgb3IgMyB3aXRoIEVJVEhFUiB0b3Agb3IgYm90dG9tXG4gIC8vaWYgdGhlIG5vc2UgaXMgc3VwcG9zZWQgdG8gYmUgc29saWQsIGJhY2tncm91bmQtY29sb3IgY2FuIGJlIHNldCB0byB0cmFuc3BhcmVudFxuXG4gICY6YmVmb3JlLCAmOmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgJHBvczogLTIgKiAkd2lkdGg7XG4gICAgQGlmICRxdWFkcmFudCA9PSAwIHtcbiAgICAgIHRvcDogJHBvcztcbiAgICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgJGJvcmRlci1jb2xvciB0cmFuc3BhcmVudDtcbiAgICB9O1xuICAgIEBpZiAkcXVhZHJhbnQgPT0gMSB7XG4gICAgICByaWdodDogJHBvcztcbiAgICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgJGJvcmRlci1jb2xvcjtcbiAgICB9XG4gICAgQGlmICRxdWFkcmFudCA9PSAyIHtcbiAgICAgIGJvdHRvbTogJHBvcztcbiAgICAgIGJvcmRlci1jb2xvcjogJGJvcmRlci1jb2xvciB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudDtcbiAgICB9XG4gICAgQGlmICRxdWFkcmFudCA9PSAzIHtcbiAgICAgIGxlZnQ6ICRwb3M7XG4gICAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50ICRib3JkZXItY29sb3IgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQ7XG4gICAgfVxuICAgIEBpZiAkdG9wICE9IFwiXCIge3RvcDogJHRvcH07XG4gICAgQGlmICRyaWdodCAhPSBcIlwiIHtyaWdodDogJHJpZ2h0fTtcbiAgICBAaWYgJGJvdHRvbSAhPSBcIlwiIHtib3R0b206ICRib3R0b219O1xuICAgIEBpZiAkbGVmdCAhPSBcIlwiIHtsZWZ0OiAkbGVmdH07XG4gICAgd2lkdGg6IDA7XG4gICAgaGVpZ2h0OiAwO1xuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG4gICAgYm9yZGVyLXdpZHRoOiAkd2lkdGg7XG4gICAgYm9yZGVyLXJhZGl1czogaW5oZXJpdDtcbiAgfVxuICAmOmFmdGVyIHtcbiAgICAkcG9zOiAoLTIgKiAkd2lkdGgpICsgJGJvcmRlcjtcbiAgICBAaWYgJHF1YWRyYW50ID09IDAge1xuICAgICAgdG9wOiAkcG9zO1xuICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAkYmFja2dyb3VuZC1jb2xvciB0cmFuc3BhcmVudDtcbiAgICB9XG4gICAgQGlmICRxdWFkcmFudCA9PSAxIHtcbiAgICAgIHJpZ2h0OiAkcG9zO1xuICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAkYmFja2dyb3VuZC1jb2xvcjtcbiAgICB9XG4gICAgQGlmICRxdWFkcmFudCA9PSAyIHtcbiAgICAgIGJvdHRvbTogJHBvcztcbiAgICAgIGJvcmRlci1jb2xvcjogJGJhY2tncm91bmQtY29sb3IgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQ7XG4gICAgfVxuICAgIEBpZiAkcXVhZHJhbnQgPT0gMyB7XG4gICAgICBsZWZ0OiAkcG9zO1xuICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCAkYmFja2dyb3VuZC1jb2xvciB0cmFuc3BhcmVudCB0cmFuc3BhcmVudDtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBbaW5saW5lRnJhbWUgZGVzY3JpcHRpb25dXG4gKiBAcmV0dXJuIHtbdHlwZV19IFtkZXNjcmlwdGlvbl1cbiAqL1xuQG1peGluIGlubGluZUZyYW1lICgpIHtcbiAgcGFkZGluZzogMjBweCAxNXB4O1xuICBib3JkZXItcmFkaXVzOiAkZnJhbWVfYm9yZGVyX3JhZGl1cztcbiAgZGlzcGxheTogbm9uZTtcbiAgbWFyZ2luLWJvdHRvbTogMThweDtcbiAgJi52aXNpYmxlIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgfSAgXG59XG4iLCIvLyBcbi8vIFJlYXNvbiB0byBkb24ndCB1c2UgaWQgc2VsZWN0b3JzIGluc3RlYWQgb2YgY2xhc3Mgc2VsZWN0b3JzXG4vLyBodHRwOi8vY3Nzd2l6YXJkcnkuY29tLzIwMTEvMDkvd2hlbi11c2luZy1pZHMtY2FuLWJlLWEtcGFpbi1pbi10aGUtY2xhc3MvXG4vLyBodHRwOi8vc2NyZXdsZXdzZS5jb20vMjAxMC8wNy9kb250LXVzZS1pZC1zZWxlY3RvcnMtaW4tY3NzL1xuLy8gaHR0cDovL29saS5qcC8yMDExL2lkcy9cblxuLmJ1YmJsZSB7XG4gIEBpbmNsdWRlIGJ1YmJsZSgxMHB4LCAycHgsICRxdWFkcmFudDogMywgJGJvdHRvbTogMjBweCwgJGJvcmRlci1jb2xvcjogJGdyZXksICRiYWNrZ3JvdW5kLWNvbG9yOiAkd2hpdGUpO1xufVxuXG4ubGhmc193aWRnZXQge1xuICAudGlwIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2t5O1xuICAgIEBpbmNsdWRlIGlubGluZUZyYW1lKCk7XG4gICAgcGFkZGluZy1sZWZ0OiA0MHB4O1xuICAgIC8vbWFyZ2luLWJvdHRvbTogMThweDtcbiAgICAuaW50cm8ge1xuICAgICAgJjpiZWZvcmUge1xuICAgICAgICBmb250LWZhbWlseTogJGZvbnRfaWNvbnM7XG4gICAgICAgIGNvbnRlbnQ6ICRmb250X2ljb25zX3RpcDtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IC0yMHB4OyAvL3RoaXMgaXMgZmFraW5nIGl0LCBjb21wZW5zYXRpbmcgZm9yIHRoZSBzcGFjZSByZXF1aXJlbWVudCBvZiA6YmVmb3JlLCBkaXNwbGF5OiBpbmxpbmUgZG9lcyBub3Qgc2VlbSB0byB3b3JrXG4gICAgICAgIG1hcmdpbi1yaWdodDogLTVweDtcbiAgICAgICAgbGVmdDogLTEwcHg7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIH1cbiAgICAgIGNvbG9yOiAkd2hpdGU7XG4gICAgICBmb250LXNpemU6ICRsYXJnZTtcbiAgICAgIGZvbnQtZmFtaWx5OiAkZm9udF9ub3JtYWw7XG4gICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICAgIH1cbiAgfVxuXG4gIGZvcm0+dWwsICYgdWwucHJvZHVjdHMge1xuICAgIG1hcmdpbjogMzBweCAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGxpLnByb2R1Y3Qge1xuICAgICAgLmRlc2NyaXB0aW9uIHtcbiAgICAgICAgJjpiZWZvcmUge1xuICAgICAgICAgIGZvbnQtZmFtaWx5OiAkZm9udF9pY29ucztcbiAgICAgICAgICBjb2xvcjogJGJsdWU7XG4gICAgICAgICAgY29udGVudDogJGZvbnRfaWNvbnNfaGVhZGhwaG9uZXM7XG4gICAgICAgICAgbWFyZ2luLWxlZnQ6IC0yMHB4OyAvL3RoaXMgaXMgZmFraW5nIGl0LCBjb21wZW5zYXRpbmcgZm9yIHRoZSBzcGFjZSByZXF1aXJlbWVudCBvZiA6YmVmb3JlLCBkaXNwbGF5OiBpbmxpbmUgZG9lcyBub3Qgc2VlbSB0byB3b3JrXG4gICAgICAgICAgbGVmdDogLTEwcHg7XG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB9XG4gICAgICAgIHBhZGRpbmctbGVmdDogNDBweDtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgICAgIH1cblxuICAgICAgZGl2LnRpdGxlLCBzcGFuLnBvbGljZS1udW1iZXIge1xuICAgICAgICBmb250LWZhbWlseTogJGZvbnRfbWVkaXVtOyAgLy9mb250LXdlaWdodCBib2xkIGRvZXMgbm90IHdvcmsgZm9yIHRoaXMgZm9udCBmYW1pbHkgPjooO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxpLnZhbHVlIHtcbiAgICBAbWVkaWEgc2NyZWVuIGFuZChtaW4td2lkdGg6ICRyYy1tLW1pbi13aWR0aCkgYW5kKG1heC13aWR0aDogJHJjLWwtbWF4LXdpZHRoKSB7XG4gICAgICBoZWlnaHQ6ICRlbGVtZW50c19oZWlnaHQ7XG4gICAgfVxuICAgIHNwYW4ge1xuICAgICAgJi5jb250ZW50LCAmLmhlbHAge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmU7XG4gICAgICB9XG4gICAgICAmLmhlbHAge1xuICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZChtYXgtd2lkdGg6ICRyYy1zLW1heC13aWR0aCkge1xuICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbGkubGFiZWwge1xuICAgIG1pbi1oZWlnaHQ6IDA7XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQobWluLXdpZHRoOiAkcmMtbS1taW4td2lkdGgpIGFuZChtYXgtd2lkdGg6ICRyYy1sLW1heC13aWR0aCkge1xuICAgICAgaGVpZ2h0OiBpbmhlcml0OyAgLy8kZWxlbWVudHNfaGVpZ2h0O1xuICAgIH1cbiAgICAmOmFmdGVyIHtcbiAgICAgIGNvbnRlbnQ6IFwiOlwiO1xuICAgIH1cbiAgfVxuICBsYWJlbC5sZWZ0IHtcbiAgICBmbG9hdDpsZWZ0O1xuICB9XG5cbiAgaW5wdXRbdHlwZT10ZXh0XSwgaW5wdXRbdHlwZT1lbWFpbF0sIGlucHV0W3R5cGU9bnVtYmVyXSwgc2VsZWN0LCAuZGRUaXRsZSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuICAuZWRpdCB7XG4gICAgdWwuZXJyb3Ige1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgICAgaGVpZ2h0OiAyNHB4O1xuICAgICAgbWluLWhlaWdodDogMDtcbiAgICAgIFtjbGFzcyo9J3NwYW4nXSB7XG4gICAgICAgIG1pbi1oZWlnaHQ6IDA7ICAvL292ZXJ3cml0aW5nIG1pbi1oZWlnaHQgZnJvbSByb3ctZmx1aWRcbiAgICAgICAgbGluZS1oZWlnaHQ6IDE4cHg7ICAvL292ZXJ3cml0aW5nIGxpbmUtaGVpZ2h0IGZyb20gKmJvZHlcbiAgICAgIH1cbiAgICAgICY+IGxpIHtcbiAgICAgICAgY29sb3I6ICRyZWQ7XG4gICAgICAgIGZvbnQtc2l6ZTogJHNtYWxsO1xuICAgICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIH1cbiAgICAgICYudmlzaWJsZSB7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICB9XG4gICAgfVxuICAgIGxpLmxhYmVsIHtcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDU1cHg7XG4gICAgICBAbWVkaWEgc2NyZWVuIGFuZChtYXgtd2lkdGg6ICRyYy1zLW1heC13aWR0aCkge1xuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgICAgfVxuICAgIH1cbiAgICBsaS5sYWJlbCwgbGFiZWwge1xuICAgICAgZm9udC1mYW1pbHk6ICRmb250X25vcm1hbDtcbiAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgICAgJjphZnRlciB7XG4gICAgICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGxpLmxhYmVsLnJlcXVpcmVkOmFmdGVyLCBsYWJlbC5jaGVja2JveC5yZXF1aXJlZCBzcGFuLmxhYmVsOmFmdGVyIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiA1cHg7XG4gICAgICBjb250ZW50OiBcIipcIjtcbiAgICAgIGNvbG9yOiAkcmVkO1xuICAgIH1cblxuICAgIGlucHV0W3R5cGU9dGV4dF0sIGlucHV0W3R5cGU9ZW1haWxdLCBpbnB1dFt0eXBlPW51bWJlcl0sIHNlbGVjdCwgLmRkVGl0bGUge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgfVxuICAgIGxpLnZhbHVlIHtcbiAgICAgIHNwYW4ge1xuICAgICAgICAmLmNvbnRlbnQsICYuaGVscCB7XG4gICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGZpeCByZXNwb25zaXZlIHBlY3VsaWFyaXRpZXNcbiAgLnJvdy1mbHVpZCBbY2xhc3MqPSdzcGFuJ10ge1xuICAgIGRpc3BsYXk6IGlubGluZTtcbiAgICBAbWVkaWEgc2NyZWVuIGFuZChtYXgtd2lkdGg6ICRyYy1zLW1heC13aWR0aCkge1xuICAgICAgbWluLWhlaWdodDogNXB4O1xuICAgIH1cbiAgfVxufVxuXG4ubGhmc193aWRnZXQgZGl2LnBheW1lbnRzIHtcbiAgJG9wZW5fY29sb3I6ICRyZWQ7XG4gICRwYWlkX2NvbG9yOiAkZ3JlZW47XG4gIC5zdGF0dXMgc3BhbiB7XG4gICAgJjpiZWZvcmUge1xuICAgICAgZm9udC1mYW1pbHk6ICRmb250X2ljb25zO1xuICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gICAgfVxuICAgICYub3BlbiB7XG4gICAgICBjb2xvcjogJG9wZW5fY29sb3I7XG4gICAgICAmOmJlZm9yZSB7XG4gICAgICAgIGNvbnRlbnQ6ICRmb250X2ljb25zX3RpcDtcbiAgICAgIH1cbiAgICB9XG4gICAgJi5wYWlkIHtcbiAgICAgIGNvbG9yOiAkcGFpZF9jb2xvcjtcbiAgICAgICY6YmVmb3JlIHtcbiAgICAgICAgY29udGVudDogJGZvbnRfaWNvbnNfY2hlY2s7XG4gICAgICB9XG4gICAgfVxuICB9XG4gICYgPiB1bCB7ICAvL3RoaXMgc2V0dXAgaXMgZm9yIHBoYXNlIDM7IGl0IGlzIG5vdCByZWFsbHkgb3B0aW1hbCwgaW5zdGVhZCBvZiA+IGdpdmUgdGhlIHJvb3QgdWwgYSBjbGFzcyBuYW1lXG4gICAgJiA+IGxpIHtcbiAgICAgICYgPiB1bCwgJiA+IHVsLnZpc2libGUge1xuICAgICAgICBkaXNwbGF5OiB0YWJsZTtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGJvcmRlci10b3A6IG5vbmU7XG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkc2xpZ2h0bHlfZGFya2VyX2dyZXk7XG4gICAgICAgIHBhZGRpbmc6IDEwcHggMTVweDtcbiAgICAgICAgJi5oZWFkZXIge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRiZWlnZTtcbiAgICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQgJHNsaWdodGx5X2Rhcmtlcl9ncmV5O1xuICAgICAgICAgIGJvcmRlci1ib3R0b206IG5vbmU7XG4gICAgICAgICAgJiA+IGxpIHtcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAkZm9udF9tZWRpdW07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vdGhpcyBzaG91bGQgdWx0aW1hdGVseSBiZSByZXBsYWNlZCBieSBncmlkIGNsYXNzZXMsIGJ1dCB0aGV5IHdlcmUgY2F1c2luZyBhIGJpdCBvZiBhIG1lc3Mgc28gdGhpcyBpcyBhbiBhcnJhbmdlbWVudCB0byBzZXQgaXQgdXBcbiAgICAgICAgJiA+IGxpIHtcbiAgICAgICAgICAmOm50aC1vZi10eXBlKDEpIHtcbiAgICAgICAgICAgIHdpZHRoOiAyMDBweDtcbiAgICAgICAgICB9XG4gICAgICAgICAgJjpudGgtb2YtdHlwZSgyKSB7XG4gICAgICAgICAgICB3aWR0aDogMTIwcHg7XG4gICAgICAgICAgfVxuICAgICAgICAgICY6bnRoLW9mLXR5cGUoNCkge1xuICAgICAgICAgICAgd2lkdGg6IDEyMHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAmOm50aC1vZi10eXBlKDUpIHtcbiAgICAgICAgICAgIHdpZHRoOiAyMHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC5tZXRob2Qge1xuICAgIGNvbG9yOiAkc2xpZ2h0bHlfZGFya2VyX2dyZXk7XG4gIH1cblxuICAuZGV0YWlscyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgJjpiZWZvcmUge1xuICAgICAgZm9udC1mYW1pbHk6ICRmb250X2ljb25zO1xuICAgICAgY29udGVudDogJGZvbnRfaWNvbnNfcGx1cztcbiAgICAgIGNvbG9yOiAkZ3JleTtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIH1cbiAgfVxuICAuYW1vdW50IHtcbiAgICAmOmJlZm9yZSB7XG4gICAgICBjb250ZW50OiBcIuKCrFwiO1xuICAgIH1cbiAgfVxuICAuZGF0ZSB7XG4gICAgY29sb3I6ICRibHVlO1xuICB9XG59XG5cbi5pbmxpbmVfYWxlcnQge1xuICBAaW5jbHVkZSBpbmxpbmVGcmFtZSgpO1xuICBkaXNwbGF5OiBibG9jaztcbiAgLy9wYWRkaW5nLXRvcDogMDtcbiAgLy9wYWRkaW5nLWJvdHRvbTogMDtcbiAgYm9yZGVyOiAxcHggc29saWQgJGxpZ2h0X3JlZDtcbiAgYmFja2dyb3VuZC1jb2xvcjogJGxpZ2h0ZXJfcmVkO1xuICBociB7XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgY29sb3I6ICRsaWdodF9yZWQ7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbiAgdWwucGF5bWVudHMge1xuICAgIG1hcmdpbjogMTVweCAtMTVweDtcbiAgICBidXR0b24ud2hpdGUge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAmOmJlZm9yZSB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyAgICAgIFxuICAgICAgfVxuICAgIH1cbiAgICAmID4gbGkge1xuICAgICAgJiA+IHVsIHtcbiAgICAgICAgcGFkZGluZzogMTBweCAxNXB4O1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAkbGlnaHRfcmVkO1xuICAgICAgICBib3JkZXItd2lkdGg6IDFweCAwIDAgMDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGRpc3BsYXk6IHRhYmxlO1xuICAgICAgICAmID4gbGkge1xuICAgICAgICAgIC8vZGlzcGxheTogdGFibGUtY2VsbDtcbiAgICAgICAgICBmbG9hdDogbm9uZTtcbiAgICAgICAgICAvL3RoaXMgc2hvdWxkIHVsdGltYXRlbHkgYmUgcmVwbGFjZWQgYnkgZ3JpZCBjbGFzc2VzLCBidXQgdGhleSB3ZXJlIGNhdXNpbmcgYSBiaXQgb2YgYSBtZXNzIHNvIHRoaXMgaXMgYW4gYXJyYW5nZW1lbnQgdG8gc2V0IGl0IHVwXG4gICAgICAgICAgJjpmaXJzdC1vZi10eXBlOmxhc3Qtb2YtdHlwZSB7ICAvL3RoaXMgb25seSBhcHBsaWVzIHRvIGEgbGkgaWYgaXQgaXMgdGhlIG9ubHkgb25lLi5cbiAgICAgICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgICAgICAgIH1cbiAgICAgICAgICAmOm50aC1vZi10eXBlKDIpIHtcbiAgICAgICAgICAgIHdpZHRoOiAxMjBweDtcbiAgICAgICAgICAgIHNwYW4uZGViaXQge1xuICAgICAgICAgICAgICBmb250LWZhbWlseTogJGZvbnRfbWVkaXVtO1xuICAgICAgICAgICAgICAmOmJlZm9yZSB7XG4gICAgICAgICAgICAgICAgY29udGVudDogXCLigqxcIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAmOm50aC1vZi10eXBlKDMpIHtcbiAgICAgICAgICAgIHdpZHRoOiA4MHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAmOm50aC1vZi10eXBlKDQpIHtcbiAgICAgICAgICAgIHdpZHRoOiAxMjBweDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaDMge1xuICAgIGNvbG9yOiAkYmxhY2s7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIH1cbn1cblxuLmhlbHAge1xuICAmW3RpdGxlPScnXSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuICBtYXJnaW46IDA7XG4gIG1hcmdpbi1yaWdodDogMTBweDtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBmbG9hdDogcmlnaHQ7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgJi5kaWFsb2cge1xuICAgIHotaW5kZXg6IDU7XG4gICAgJGhlbHBfZGlhbG9nX3dpZHRoOiA0MDBweDtcbiAgICBAaW5jbHVkZSBidWJibGUoJHdpZHRoOiAxMHB4LCAkbGVmdDogJGhlbHBfZGlhbG9nX3dpZHRoIC8gMiwgJHF1YWRyYW50OiAwLCAkYmFja2dyb3VuZC1jb2xvcjogJHNsaWdodGx5X2xpZ2h0ZXJfYmx1ZSk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHNsaWdodGx5X2xpZ2h0ZXJfYmx1ZTtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgcGFkZGluZzogMThweDtcbiAgICBtYXgtd2lkdGg6ICRoZWxwX2RpYWxvZ193aWR0aDtcbiAgICBib3JkZXItcmFkaXVzOiAkZnJhbWVfYm9yZGVyX3JhZGl1cztcbiAgfVxuICAmOmJlZm9yZSB7XG4gICAgZm9udC1mYW1pbHk6ICRmb250X2ljb25zO1xuICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICBjb250ZW50OiAkZm9udF9pY29uc19oZWxwO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgfVxufVxuXG51bC5hY3Rpb25zIHtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbiAgbGkge1xuICAgIGZsb2F0OiBub25lO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICYuZWRpdCB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cbiAgfVxuICAmLmVkaXQge1xuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgIGxpIHtcbiAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgICAmLmVkaXQge1xuICAgICAgICBwYWRkaW5nLWxlZnQ6IDA7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBkaXYuZGlzYWJsZXIgeyAgLy9yZXF1aXJlZCBlbGVtZW50IGZvciBkaXNhYmxpbmcgb2Ygc3VibWl0IGVsZW1lbnRzIGRlcGVuZGluZyBvbiB2YWxpZGl0eVxuICAgICAgICAgIHotaW5kZXg6ICRlbGVtZW50c19kaXNhYmxlcl96LWluZGV4O1xuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICAgIHRvcDotJGVsZW1lbnRzX2J1dHRvbl9oZWlnaHQ7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgICAgICAgb3BhY2l0eTogMC41O1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIGhlaWdodDogJGVsZW1lbnRzX2J1dHRvbl9oZWlnaHQ7XG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7IC8vYWx3YXlzLW9uLCBzdGF0ZSBpcyBpbmRpY2F0ZWQgYnkgei1pbmRleCBvZiB0aGUgYnV0dG9uczsgc2VlIGlmIHRoZSBhbHdheXMtb24gY3JlYXRlcyBwcm9ibGVtcyB3aXRoIGJhY2tncm91bmRzIG90aGVyIHRoYW4gd2hpdGVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgJi52aWV3IHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIH1cbiAgICAgIGJ1dHRvbiB7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgei1pbmRleDogJGVsZW1lbnRzX2J1dHRvbl9lbmFibGVkX3otaW5kZXg7XG4gICAgICAgICYuZGlzYWJsZWQge1xuICAgICAgICAgIHotaW5kZXg6ICRlbGVtZW50c19idXR0b25fZGlzYWJsZWRfei1pbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5saS5yaWdodCB7XG4gIHRleHQtYWxpZ246IHJpZ2h0O1xufVxudWwuaG9yaXpvbnRhbCB7XG4gIGRpc3BsYXk6IHRhYmxlO1xuICAmLnJvdy1mbHVpZCB7XG4gICAgaGVpZ2h0OiA1MHB4O1xuICB9XG4gIG1hcmdpbjogMDtcbiAgQG1lZGlhIHNjcmVlbiBhbmQobWF4LXdpZHRoOiAkcmMtcy1tYXgtd2lkdGgpIHtcbiAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICB9XG4gIHBhZGRpbmc6IDFweCAwO1xuICAvL3dpZHRoOiAxMDAlO1xuICBkaXNwbGF5OiBub25lOyAvL3RvZ2V0aGVyIHdpdGggdGhlIC5kYXRhIGNsYXNzIGZvciBsaS5wcm9kdWN0IHRvZ2dsZXMgb24gYW5kIG9mZiB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgZGF0YSBlbGVtZW50c1xuICAmLmNsZWFyIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICBtYXJnaW46IDAgMCAtMXB4O1xuICAgIGNsZWFyOiBib3RoO1xuICB9XG4gICYudmlzaWJsZSB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gIH1cbiAgbGkge1xuICAgICYubGFiZWwge1xuICAgICAgZm9udC1mYW1pbHk6ICRmb250X25vcm1hbDtcbiAgICB9XG4gICAgJi52YWx1ZSB7XG4gICAgICBmb250LWZhbWlseTogJGZvbnRfbGlnaHQ7XG4gICAgfVxuICAgIGRpc3BsYXk6IHRhYmxlLWNlbGw7XG4gIH1cbn1cblxuLyoqXG4gKiBBZGRlZCBieSBSb2NjbzogUGxlYXNlIGNoZWNrIHRoZSBleHBsYW5hdGlvbiB3cm90ZSBpbiBsYXlvdXQvX2dyaWQuc2NzcyBhdCBcbiAqIGxpbmUgMTAwLCByZWxhdGVkIHRvIHRoaXMgc3BlY2lmaWMgZGVjbGFyYXRpb24gYmVsb3csIHRoYXQgaGVscHMgdG8gdmlzdWFpemUgXG4gKiB5b3VyIHdpZGdldCBpbiB0aGUgcmlnaHQgd2F5LlxuICovXG4ubGhmc193aWRnZXQge1xuXG4gIC5wcm9kdWN0LmRhdGEuc3BhbjEyLCAucm93LWZsdWlkIGxpLnZhbHVlW2NsYXNzKj0nc3BhbiddIHtcbiAgICBtYXJnaW4tbGVmdDogMDsgLy9vdmVycmlkZXMgdGhlIHNldHRpbmcgZm9yIGEgbGVmdCBtYXJnaW4gb2YgMiUgZm9yIGFsbCBzcGFucyBzdGFydGluZyBhdCB0aGUgc2Vjb25kIG9uZSBpbiBhIGxpc3QsIHdoaWNoIGNyZWF0ZXMgYW4gaW5kZW50IGluIGxoZnMgd2lkZ2V0IGRlc2lnbiBpbiB0aGUgLnByb2R1Y3QgdWxcbiAgfVxuXG59XG4iLCJcbi8vXG4vLyBWYXJpYWJsZXNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIEJMVUUgaHVlc1xuJGJsYWNrOiAjMWQxZDFiOyAvL2FjdHVhbGx5LCB0aGlzIGlzIGEgdmVyeSBkYXJrIGJsdWUsIHNvIHRoYXQgaXMgd2h5IGl0IGlzIGhlcmVcbiRkYXJrX2JsdWU6ICMwMDMwNGM7XG4kYmx1ZTogIzMzOTVkMztcbiRsaWdodF9ibHVlOiAjNjZiMGRlO1xuJHZlcnlfbGlnaHRfYmx1ZTogIzMzNTk3MDtcbiRsaWdodGVyX2JsdWU6ICM4NUJGRTU7XG4kcGFzdGVsX2xpZ2h0X2JsdWU6ICNEOUVCRjc7XG4kc2xpZ2h0bHlfbGlnaHRlcl9ibHVlOiAjOTlDQUU5O1xuJHNreTogIzhjZDFlNjtcbiRmdW5fYmx1ZV9hcHByb3g6ICMyMTYzYWU7XG4kbG9jaG1hcmFfYXBwcm94OiAjMDA3YWM3O1xuLy8gT1JBTkdFU1xuJG9yYW5nZTogI2Y5YTYwMDtcbi8vIEdSRVlTXG4kd2hpdGU6ICNmZmZmZmY7XG4kbGlnaHRlcl9ncmV5OiAjRUZFQkU3O1xuJGxpZ2h0X2dyZXk6ICM4RThFOEM7XG4kZ3JleTogI2VkZWJlNTtcbiRzbGlnaHRseV9kYXJrZXJfZ3JleTogI2UwZTBlMDtcbi8vIEdSRUVOU1xuJGdyZWVuOiAjNDlhZjU3O1xuJGxpZ2h0X2dyZWVuOiAjQzFFQ0Q1O1xuJGRhcmtfZ3JlZW46ICM3RkFFM0Y7XG4vLyBSRURTXG4kcmVkOiAjQzUwQjFGO1xuJGRhcmtfcmVkOiAjY2E0NjQyO1xuJGxpZ2h0X3JlZDogI0U2Q0VDRDtcbiRsaWdodGVyX3JlZDogI2YzZTdlNjtcbi8vIFlFTExPV1NcbiR5ZWxsb3c6ICNmZmVhNTM7XG4kbGlnaHRfeWVsbG93OiAjZmZmY2U1O1xuJGRhcmtfeWVsbG93OiAjQjBBMTI2O1xuLy8gQlJPV05TXG4kYmVpZ2U6ICNlZWViZTU7XG4vLyBQSU5LXG4kcGluazogI2VkZDVkOTtcbiRkYXJrX3Bpbms6ICNDNDFGMkM7XG5cbiRmb250X2ZhbGxiYWNrOiBBcmlhbCwgVmVyZGFuYSwgc2Fucy1zZXJpZjtcbiRmb250X2xpZ2h0OiAnc2VudGljb3NhbnNkdGxpZ2h0JywgJGZvbnRfZmFsbGJhY2s7XG4kZm9udF9ub3JtYWw6ICdzZW50aWNvc2Fuc2R0cmVndWxhcicsICRmb250X2ZhbGxiYWNrO1xuJGZvbnRfbWVkaXVtOiAnc2VudGljb3NhbnNkdG1lZGl1bScsICRmb250X2ZhbGxiYWNrO1xuJGZvbnRfYm9sZDogJ3NlbnRpY29zYW5zZHRjb25kYm9sZCcsICRmb250X2ZhbGxiYWNrO1xuJGZvbnRfaWNvbnM6ICdhZWdvbl9pY29ucyc7IC8vIE5vIGZhbGxiYWNrIGhlcmUgPj4gIXVubmVjZXNzYXJ5XG5cbiRmb250X2ljb25zX2hlbHA6IFwiXFxlNjJmXCI7XG4kZm9udF9pY29uc19lcnJvcjogXCJcXGU2MmVcIjtcbiRmb250X2ljb25zX3RpcDogXCJcXGU2MzFcIjtcbiRmb250X2ljb25zX2Fycm93X3JpZ2h0OiBcIlxcZTYwMFwiO1xuJGZvbnRfaWNvbnNfYXJyb3dfZG93bjogXCJcXGU2MzBcIjtcbiRmb250X2ljb25zX2hlYWRocGhvbmVzOiBcIlxcZTYwNVwiO1xuJGZvbnRfaWNvbnNfY2hlY2s6IFwiXFxlNjMyXCI7XG4kZm9udF9pY29uc19wbHVzOiBcIlxcZTYyZFwiO1xuJGZvbnRfaWNvbnNfcmFkaW86IFwiXFxlNjMzXCI7XG4kZm9udF9pY29uc19lZGl0OiBcIlxcZTYxMFwiO1xuJGZvbnRfaWNvbnNfZmlzdGZ1bGw6IFwiXFxlNjBlXCI7XG4kZm9udF9pY29uc19tYW46IFwiXFxlNjM2XCI7XG4kZm9udF9pY29uc19kb2N1bWVudF9uX3BlbjogXCJcXGU2MmNcIjtcbiRmb250X2ljb25zX2RvY3VtZW50X25fY2hlY2s6IFwiXFxlNjA0XCI7XG4kZm9udF9pY29uc19wcm9kdWN0ZW46IFwiXFxlNjI5XCI7XG5cbi8vIFNJWkVTXG4kc21hbGw6IDE0cHg7XG4kbWVkaXVtOiAxOHB4O1xuJGxhcmdlOiAyMnB4O1xuJHgtbGFyZ2U6IDI1cHg7XG4keHgtbGFyZ2U6IDQwcHg7XG4keHh4LWxhcmdlOiA0NnB4O1xuXG4vLyBSRVNQT05TSVZFIENVVE9GRlNcbi8vIHNtYXJ0cGhvbmVcbiRyYy1zLW1pbi13aWR0aDogMDtcbiRyYy1zLW1heC13aWR0aDogNjQwcHg7XG4vLyB0YWJsZXRcbiRyYy1tLW1pbi13aWR0aDogNjQxcHg7XG4kcmMtbS1tYXgtd2lkdGg6IDkwMHB4O1xuLy8gZGVza3RvcFxuJHJjLWwtbWluLXdpZHRoOiA5MDFweDtcbiRyYy1sLW1heC13aWR0aDogMTYwMDBweDtcblxuLy8gSU5URVJGQUNFIEVMRU1FTlRTXG4kZWxlbWVudHNfYm9yZGVyX3JhZGl1czogM3B4O1xuJGVsZW1lbnRzX2JvcmRlcl93aWR0aDogMXB4O1xuJGVsZW1lbnRzX2JvcmRlcjogJGVsZW1lbnRzX2JvcmRlcl93aWR0aCBzb2xpZCAkc2xpZ2h0bHlfZGFya2VyX2dyZXk7XG4kZWxlbWVudHNfaGVpZ2h0OiA0NHB4O1xuJGVsZW1lbnRzX2J1dHRvbl9oZWlnaHQ6IDM4cHg7XG4kZWxlbWVudHNfYnV0dG9uX2Rpc2FibGVkX3otaW5kZXg6IDE7XG4kZWxlbWVudHNfYnV0dG9uX2VuYWJsZWRfei1pbmRleDogMztcbiRlbGVtZW50c19kaXNhYmxlcl96LWluZGV4OiAyO1xuJGVsZW1lbnRzX2NoZWNrYm94X2hlaWdodDogMzJweDtcbiRlbGVtZW50c19jaGVja2JveF90b3A6IDRweDtcbiRlbGVtZW50c19yYWRpb19oZWlnaHQ6IDMycHg7XG4kZWxlbWVudHNfcmFkaW9fdG9wOiAxN3B4O1xuJGVsZW1lbnRzX3JhZGlvX2xpbmUtaGVpZ2h0OiAxNXB4O1xuXG4kZnJhbWVfYm9yZGVyX3JhZGl1czogM3B4O1xuXG4vKipcbiAqIEJSRUFLUE9JTlRTIGZvciBBRUdPTi5ubCBjdXJyZW50IHdlYnNpdGUuXG4gKiBBcHByb2FjaDogTW9iaWxlIEZpcnN0IE1ldGhvZFxuICovXG5cbi8qKlxuICogTW9iaWxlXG4gKlxuICogRXhhbXBsZTogQGluY2x1ZGUgYnJlYWtwb2ludCgkYnJrLW1vYmlsZSkge31cbiAqIFxuICogSU1QT1JUQU5UOiB0cnkgdG8gYXZvaWQgdGhlIGJyZWFrcG9pbnQgYmVsb3csIHNpbmNlIHRoZSB0aGVtZSBpcyBhbHJlYWR5XG4gKiBtb2JpbGUgZmlyc3QgYW5kIGV2ZXJ5dGhpbmcgbmVlZCB0byBiZSB3cml0dGVuIG1vYmlsZSBhcyBkZWZhdWx0LlxuICovXG4kYnJrLW1vYmlsZTogJ29ubHkgc2NyZWVuJyAobWF4LXdpZHRoIDY0MHB4KTtcblxuLyoqXG4gKiBHZW5lcmljIFRhYmxldCBhbmQgdXBwZXJcbiAqXG4gKiBFeGFtcGxlOiBAaW5jbHVkZSBicmVha3BvaW50KCRicmstdGFibGV0KSB7fVxuICovXG4kYnJrLXRhYmxldDogJ29ubHkgc2NyZWVuJyAoNjQxcHgpO1xuXG4vKipcbiAqIGlQYWQgcG9ydHJhaXQgYW5kIHVwcGVyXG4gKlxuICogRXhhbXBsZTogQGluY2x1ZGUgYnJlYWtwb2ludCgkYnJrLWlwYWQtcG9ydHJhaXQpIHt9XG4gKi9cbiRicmstaXBhZC1wb3J0cmFpdDogJ29ubHkgc2NyZWVuJyAoOTAxcHgpO1xuXG4vKipcbiAqIGlQYWQgbGFuZHNjYXBlIGFuZCB1cHBlclxuICpcbiAqIEV4YW1wbGU6IEBpbmNsdWRlIGJyZWFrcG9pbnQoJGJyay1pcGFkLWxhbmRzY2FwZSkge31cbiAqL1xuJGJyay1pcGFkLWxhbmRzY2FwZTogJ29ubHkgc2NyZWVuJyAoMTAyNHB4KSAob3JpZW50YXRpb24gbGFuZHNjYXBlKTtcblxuLyoqXG4gKiBMYXJnZSBkZXNrdG9wIGFuZCB1cHBlclxuICpcbiAqIEV4YW1wbGU6IEBpbmNsdWRlIGJyZWFrcG9pbnQoJGJyay1sYXJnZS1kZXNrdG9wKSB7fVxuICovXG4kYnJrLWxhcmdlLWRlc2t0b3A6ICdvbmx5IHNjcmVlbicgKDEzNTBweCk7XG5cbi8qKlxuICogRGV2aWNlIFBpeGVsIFJhdGlvIG9mIGF0IGxlYXN0IDEuNSBhbmQgdXBwZXJcbiAqXG4gKiBFeGFtcGxlOiBAaW5jbHVkZSBicmVha3BvaW50KCRicmstaGlkcGkpIHt9XG4gKi9cbiRicmstaGlkcGk6IG1pbi1yZXNvbHV0aW9uIDEuNWRwcHg7XG5cbi8qKlxuICogTWVkaWEgcHJpbnRcbiAqXG4gKiBFeGFtcGxlOiBAaW5jbHVkZSBicmVha3BvaW50KCRicmstcHJpbnQpIHt9XG4gKi9cbiRicmstcHJpbnQ6ICdwcmludCc7XG5cblxuLyoqXG4gKiBQbGF5Z3JvdW5kIGV4YW1wbGVcbiAqIE5vdGU6IGhpZGUgc2VjdGlvbiBiZWxvdyB0byByZXByb2R1Y2UgQ1NTIGJyZWFrcG9pbnRzXG4gKi9cbi8vICNiYWNrLXRvcDphZnRlciB7XG4vLyAgIC8vIEBpbmNsdWRlIGJyZWFrcG9pbnQoJGJyay1tb2JpbGUpIHtcbi8vICAgLy8gICBjb250ZW50OiAnQnJlYWtwb2ludDogTW9iaWxlJztcbi8vICAgLy8gfVxuLy8gICBAaW5jbHVkZSBicmVha3BvaW50KCRicmstdGFibGV0KSB7XG4vLyAgICAgY29udGVudDogJ0JyZWFrcG9pbnQ6IFRhYmxldCc7XG4vLyAgIH1cbi8vICAgQGluY2x1ZGUgYnJlYWtwb2ludCgkYnJrLWlwYWQtcG9ydHJhaXQpIHtcbi8vICAgICBjb250ZW50OiAnQnJlYWtwb2ludDogaVBhZCBwb3J0cmFpdCc7XG4vLyAgIH1cbi8vICAgQGluY2x1ZGUgYnJlYWtwb2ludCgkYnJrLWlwYWQtbGFuZHNjYXBlKSB7XG4vLyAgICAgY29udGVudDogJ0JyZWFrcG9pbnQ6IGlQYWQgbGFuZHNjYXBlJztcbi8vICAgfVxuLy8gICBAaW5jbHVkZSBicmVha3BvaW50KCRicmstbGFyZ2UtZGVza3RvcCkge1xuLy8gICAgIGNvbnRlbnQ6ICdCcmVha3BvaW50OiBMYXJnZSBkZXNrdG9wJztcbi8vICAgfVxuLy8gICAvLyBAaW5jbHVkZSBicmVha3BvaW50KCRicmstaGlkcGkpIHtcbi8vICAgLy8gICBjb250ZW50OiAnQnJlYWtwb2ludDogaGlkcGknO1xuLy8gICAvLyB9XG4vLyAgIEBpbmNsdWRlIGJyZWFrcG9pbnQoJGJyay1wcmludCkge1xuLy8gICAgIGNvbnRlbnQ6ICdCcmVha3BvaW50OiBQcmludCc7XG4vLyAgIH1cbi8vIH0iLCIvLyBcbi8vIFJlYXNvbiB0byBkb24ndCB1c2UgaWQgc2VsZWN0b3JzIGluc3RlYWQgb2YgY2xhc3Mgc2VsZWN0b3JzXG4vLyBodHRwOi8vY3Nzd2l6YXJkcnkuY29tLzIwMTEvMDkvd2hlbi11c2luZy1pZHMtY2FuLWJlLWEtcGFpbi1pbi10aGUtY2xhc3MvXG4vLyBodHRwOi8vc2NyZXdsZXdzZS5jb20vMjAxMC8wNy9kb250LXVzZS1pZC1zZWxlY3RvcnMtaW4tY3NzL1xuLy8gaHR0cDovL29saS5qcC8yMDExL2lkcy9cblxuLnBlcnNvbmFsX2RldGFpbHNfd2lkZ2V0IHtcbiAgdWwuaG9yaXpvbnRhbCB7IC8vb3ZlcndyaXRpbmcgdGhlIGRlZmF1bHQgXCJub25lXCIgc2V0dGluZywgYnV0IHRoaXMgbWlnaHQgYmUgYW4gb2Jzb2xldGUgYXBwcm9hY2ggYW55d2F5LCBzbyB0aGUgXCJub25lXCIgc2V0dGluZyBjb3VsZCBiZSBlbGltaW5hdGVkIGluIGdlbmVyYWwgc2V0dXBcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgfVxuICBsaS52YWx1ZSB7XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQobWluLXdpZHRoOiAkcmMtbS1taW4td2lkdGgpIGFuZChtYXgtd2lkdGg6ICRyYy1sLW1heC13aWR0aCkge1xuICAgICAgbGluZS1oZWlnaHQ6IDEwMCU7XG4gICAgICBtaW4taGVpZ2h0OiAkZWxlbWVudHNfaGVpZ2h0O1xuICAgIH1cbiAgICBzcGFuIHtcbiAgICAgICYuY29udGVudCwgJi5oZWxwIHtcbiAgICAgICAgZGlzcGxheTogaW5saW5lO1xuICAgICAgfVxuICAgICAgJi5oZWxwIHtcbiAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQobWF4LXdpZHRoOiAkcmMtcy1tYXgtd2lkdGgpIHtcbiAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGxpLmxhYmVsIHtcbiAgICBtaW4taGVpZ2h0OiAwO1xuICAgICY6YWZ0ZXIge1xuICAgICAgY29udGVudDogXCI6XCI7XG4gICAgfVxuICB9XG4gIGxhYmVsLmxlZnQge1xuICAgIGZsb2F0OmxlZnQ7XG4gIH1cblxuICAuZWRpdCB7XG4gICAgdWwuZXJyb3Ige1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgICAgaGVpZ2h0OiAyNHB4O1xuICAgICAgbWluLWhlaWdodDogMDtcbiAgICAgIFtjbGFzcyo9J3NwYW4nXSB7XG4gICAgICAgIG1pbi1oZWlnaHQ6IDA7ICAvL292ZXJ3cml0aW5nIG1pbi1oZWlnaHQgZnJvbSByb3ctZmx1aWRcbiAgICAgICAgbGluZS1oZWlnaHQ6IDE4cHg7ICAvL292ZXJ3cml0aW5nIGxpbmUtaGVpZ2h0IGZyb20gKmJvZHlcbiAgICAgIH1cbiAgICAgICY+IGxpIHtcbiAgICAgICAgY29sb3I6ICRyZWQ7XG4gICAgICAgIGZvbnQtc2l6ZTogJHNtYWxsO1xuICAgICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIH1cbiAgICAgICYudmlzaWJsZSB7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICB9XG4gICAgfVxuICAgIGxpLmxhYmVsIHtcbiAgICAgIC8vcGFkZGluZy1yaWdodDogNTVweDtcbiAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgICAgQG1lZGlhIHNjcmVlbiBhbmQobWF4LXdpZHRoOiAkcmMtcy1tYXgtd2lkdGgpIHtcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICAgIH1cbiAgICB9XG4gICAgbGkubGFiZWwsIGxhYmVsIHtcbiAgICAgIGZvbnQtZmFtaWx5OiAkZm9udF9ub3JtYWw7XG4gICAgICAmOmFmdGVyIHtcbiAgICAgICAgY29udGVudDogXCJcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgbGkubGFiZWwucmVxdWlyZWQ6YWZ0ZXIsIGxhYmVsLmNoZWNrYm94LnJlcXVpcmVkIHNwYW4ubGFiZWw6YWZ0ZXIge1xuICAgICAgbWFyZ2luLWxlZnQ6IDVweDtcbiAgICAgIGNvbnRlbnQ6IFwiKlwiO1xuICAgICAgY29sb3I6ICRyZWQ7XG4gICAgfVxuXG4gIH1cblxuICB1bC5ob3Jpem9udGFsLnJvdy1mbHVpZCB7ICAvL3RyeWluZyB0byBmaXggdGhlIGhlaWdodCBzZXQgYnkgdGhlIGdyaWQgb2YgNTBweDsgdGhlcmUgbWlnaHQgYmUgYSBuZWNlc3NpdHkgdG8gYWRhcHQgdGhlIG1hcmdpbi1ib3R0b20gaW4gcmVzcG9uc2l2ZW5lc3MgYW5kIGhvcGVmdWxseSB0aGlzIGNoYW5nZSBjYW4gYmUgYWRhcHRlZCBpbiB0aGUgZnV0dXJlIG92ZXIgYWxsIHdpZGdldHMgYW5kIC8gb3IgaW1wbGVtZW50ZWQgaW4gZ3JpZC5zY3NzXG4gICAgaGVpZ2h0OiBhdXRvO1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gIH1cblxuICAvLyBmaXggcmVzcG9uc2l2ZSBwZWN1bGlhcml0aWVzXG4gIC5yb3ctZmx1aWQgW2NsYXNzKj0nc3BhbiddIHtcbiAgICBkaXNwbGF5OiBpbmxpbmU7XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQobWF4LXdpZHRoOiAkcmMtcy1tYXgtd2lkdGgpIHtcbiAgICAgIG1pbi1oZWlnaHQ6IDVweDtcbiAgICB9XG4gIH1cblxuICAuTkwsIC53b3JsZCB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgICAmLnZpc2libGUge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgfVxuICB9XG5cbiAgLnJlc2lkZW50aWFsX2FkZHJlc3Mge1xuICAgIGJvdHRvbS1tYXJnaW46IDQwcHg7XG4gIH1cbn1cbiIsIi5jb250cmFjdF9vdmVydmlld193aWRnZXQge1xuXG4gIHVsIHtcbiAgICBwYWRkaW5nOiAwO1xuXG4gICAgbGkge1xuICAgICAgcGFkZGluZzogMnB4IDA7XG5cbiAgICAgICYuY2F0ZWdvcnkge1xuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2FhYTtcbiAgICAgICAgQGluY2x1ZGUgcmVtKCdwYWRkaW5nJywgMzAsIDEwKTtcbiAgICAgICAgQGluY2x1ZGUgcmVtKCdtYXJnaW4nLCAxMCwgMTApO1xuXG4gICAgICAgICY6Zmlyc3QtY2hpbGQge1xuICAgICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjYWFhOyAgICAgICAgICBcbiAgICAgICAgfVxuXG4gICAgICAgICY6bGFzdC1jaGlsZCB7XG4gICAgICAgICAgYm9yZGVyLWJvdHRvbTogbm9uZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAmLmFycm93IHtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMnB4IGNlbnRlcjtcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAxOHB4O1xuXG4gICAgICAgICY6YmVmb3JlIHtcbiAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgJi5ob3Jpem9udGFsIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBtYXJnaW4tYm90dG9tOiAwO1xuICAgICAgcGFkZGluZzogNnB4IDA7XG5cbiAgICAgIGxpIHtcbiAgICAgICAgZmxvYXQ6IG5vbmU7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuICAgICAgICBAaW5jbHVkZSByZW0oJ3BhZGRpbmcnLCAyLCAxOSk7XG5cbiAgICAgICAgJjpmaXJzdC1jaGlsZCB7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJi50eXBlIHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAmLmhvcml6b250YWwuaGVhZGVyIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuICB9XG5cbiAgLmxhYmVsIHtcbiAgICBjb2xvcjogJGJsdWU7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIH1cblxuICAudmFsdWU6bm90KC50aXRsZSkge1xuICAgIGZvbnQtZmFtaWx5OiAkZm9udF9ub3JtYWw7XG4gIH1cblxuICAucHJvZHVjdC50aXRsZSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuXG4gIC52YWx1ZS50aXRsZSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuXG4gIC5tZXNzYWdlcyB7XG4gICAgQGluY2x1ZGUgcmVtKCdtYXJnaW4nLCAxMCwgMTAsIDM1KTtcbiAgfVxuXG4gIGgyIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgICAmW2NsYXNzKj1cImljb24tXCJdOmJlZm9yZSB7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB0b3A6IDUwJTtcbiAgICAgIGxlZnQ6IDA7XG5cbiAgICAgIG1hcmdpbi1sZWZ0OiAtNDBweDtcbiAgICAgIC8vIG1hcmdpbi10b3A6IC0xM3B4O1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xuXG4gICAgICBmb250LXNpemU6IDI1cHg7XG4gICAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICAgICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gICAgfVxuICB9XG59XG5cbi8vIFxuLy8gTWVkaWEgcXVlcmllc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuQGluY2x1ZGUgYnJlYWtwb2ludCgkYnJrLXRhYmxldCkge1xuXG4gIC5jb250cmFjdF9vdmVydmlld193aWRnZXQge1xuXG4gICAgdWwge1xuXG4gICAgICAmLmhvcml6b250YWwge1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgcGFkZGluZzogMDtcblxuICAgICAgICBsaSB7XG4gICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgIEBpbmNsdWRlIHJlbSgncGFkZGluZycsIDgsIDE5KTtcblxuICAgICAgICAgICY6Zmlyc3QtY2hpbGQge1xuICAgICAgICAgICAgd2lkdGg6IDYwJTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJi5ob3Jpem9udGFsLmhlYWRlciB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuXG4gICAgICAgIGxpIHtcbiAgICAgICAgICBAaW5jbHVkZSByZW0oJ3BhZGRpbmcnLCAyLCAxOSk7XG5cbiAgICAgICAgICAmOmZpcnN0LWNoaWxkIHtcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGkge1xuICAgICAgICBAaW5jbHVkZSByZW0oJ3BhZGRpbmcnLCA4LCAwKTtcblxuICAgICAgICBzcGFuLnZhbHVlIHtcbiAgICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLnByb2R1Y3QudGl0bGUge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBwYWRkaW5nOiAxMHB4IDA7XG4gICAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICAgIH1cblxuICAgIC52YWx1ZS50aXRsZSB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIHBhZGRpbmc6IDEwcHggMDtcbiAgICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgfVxuICB9XG59XG4iLCIubXlfZG9jdW1lbnRzX3dpZGdldCB7XG5cbiAgYXJ0aWNsZSB7XG4gICAgQGluY2x1ZGUgcmVtKCdtYXJnaW4nLCAwLCAwKTtcbiAgICBib3JkZXItYm90dG9tLXN0eWxlOiBzb2xpZDtcbiAgICBib3JkZXItYm90dG9tLWNvbG9yOiAkc2xpZ2h0bHlfZGFya2VyX2dyZXk7XG4gICAgQGluY2x1ZGUgcmVtKCdib3JkZXItYm90dG9tLXdpZHRoJywgMSk7XG5cbiAgICAmOmZpcnN0LW9mLXR5cGUge1xuICAgICAgQGluY2x1ZGUgcmVtKCdtYXJnaW4tdG9wJywgMzApO1xuICAgICAgYm9yZGVyLXRvcC1zdHlsZTogc29saWQ7XG4gICAgICBib3JkZXItdG9wLWNvbG9yOiAkc2xpZ2h0bHlfZGFya2VyX2dyZXk7XG4gICAgICBAaW5jbHVkZSByZW0oJ2JvcmRlci10b3Atd2lkdGgnLCAxKTtcbiAgICB9XG5cbiAgICAmOmxhc3Qtb2YtdHlwZSB7XG4gICAgICBib3JkZXItYm90dG9tLXN0eWxlOiBub25lO1xuICAgIH1cblxuICAgID4gZGwge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBAaW5jbHVkZSByZW0oJ3BhZGRpbmcnLCAwLCAyMCk7XG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgdHJhbnNpdGlvbjogbWF4LWhlaWdodCAuMnMgZWFzZTtcbiAgICAgIG1hcmdpbjogMDtcbiAgICAgIG1heC1oZWlnaHQ6IDA7XG4gICAgfVxuXG4gICAgJi5vcGVuIHtcbiAgICAgICAgICBcbiAgICAgID4gZGwge1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIG1heC1oZWlnaHQ6IDEwMDBlbTtcbiAgICAgICAgdHJhbnNpdGlvbjogbWF4LWhlaWdodCAycyBlYXNlLWluO1xuICAgICAgfVxuXG4gICAgICBoMjphZnRlciB7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC05MGRlZyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaDIge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBAaW5jbHVkZSByZW0oJ2ZvbnQtc2l6ZScsIDMwKTtcbiAgICBAaW5jbHVkZSByZW0oJ21hcmdpbicsIDApO1xuICAgIEBpbmNsdWRlIHJlbSgncGFkZGluZycsIDIwLCAwLCAyMCwgMTUpO1xuICAgIEBpbmNsdWRlIHJlbSgnbGluZS1oZWlnaHQnLCA2MCk7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIHVzZXItc2VsZWN0OiBub25lO1xuXG4gICAgJjpiZWZvcmUge1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgQGluY2x1ZGUgcmVtKCdmb250LXNpemUnLCAyNSk7XG4gICAgICBAaW5jbHVkZSByZW0oJ21hcmdpbicsIDAsIDIwLCAwLCAwKTtcbiAgICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgICB9XG5cbiAgICAmOmFmdGVyIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIEBpbmNsdWRlIHJlbSgnZm9udC1zaXplJywgMTUpO1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgLy8gdG9wOiAwO1xuICAgICAgcmlnaHQ6IDA7XG4gICAgICBAaW5jbHVkZSByZW0oJ21hcmdpbi1yaWdodCcsIDMwKTtcbiAgICAgIGZvbnQtZmFtaWx5OiAkZm9udF9pY29ucztcbiAgICAgIGNvbnRlbnQ6ICdcXGU2MDAnO1xuICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIC4ycyBlYXNlO1xuICAgICAgdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpO1xuICAgIH1cbiAgfVxuXG4gIGRsLnJvdy1mbHVpZCB7XG5cbiAgICA+IGR0IHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuXG4gICAgZGQ6Zmlyc3QtY2hpbGQge1xuXG4gICAgICBhIHtcbiAgICAgICAgZm9udC1mYW1pbHk6ICRmb250X25vcm1hbDtcbiAgICAgICAgJjpiZWZvcmUge1xuICAgICAgICAgIGRpc3BsYXk6IGlubGluZTtcbiAgICAgICAgICBAaW5jbHVkZSByZW0oJ2ZvbnQtc2l6ZScsIDEwKTtcbiAgICAgICAgICBsaW5lLWhlaWdodDogaW5oZXJpdDtcbiAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLmljb24tcGRmOmJlZm9yZSB7XG4gICAgQGluY2x1ZGUgcmVtKCdmb250LXNpemUnLCAyNSk7XG4gIH1cbn1cblxuXG4vLyBcbi8vIE1lZGlhIHF1ZXJpZXNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbkBpbmNsdWRlIGJyZWFrcG9pbnQoJGJyay10YWJsZXQpIHtcblxuICAubXlfZG9jdW1lbnRzX3dpZGdldCB7XG5cbiAgICBhcnRpY2xlIHtcbiAgICAgIEBpbmNsdWRlIHJlbSgnbWFyZ2luJywgMzAsIDApO1xuXG4gICAgICAmOmZpcnN0LW9mLXR5cGUge1xuICAgICAgICBtYXJnaW4tdG9wOiAwO1xuICAgICAgICBib3JkZXItdG9wOiBub25lO1xuICAgICAgfVxuXG4gICAgICA+IGRsIHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIG1heC1oZWlnaHQ6IGluaGVyaXQ7XG4gICAgICAgIEBpbmNsdWRlIHJlbSgncGFkZGluZycsIDEwLCAwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBoMiB7XG4gICAgICBAaW5jbHVkZSByZW0oJ2ZvbnQtc2l6ZScsIDQwKTtcbiAgICAgIEBpbmNsdWRlIHJlbSgncGFkZGluZycsIDAsIDApO1xuICAgICAgQGluY2x1ZGUgcmVtKCdtYXJnaW4nLCA1LCAwLCAyMCwgMCk7XG4gICAgICBAaW5jbHVkZSByZW0oJ2xpbmUtaGVpZ2h0JywgNDApO1xuICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICAgIGN1cnNvcjogZGVmYXVsdDtcblxuICAgICAgJjpiZWZvcmUge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogNTAlO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG4gICAgICAgIEBpbmNsdWRlIHJlbSgnbWFyZ2luJywgMCwgMCwgMCwgLTQwKTtcbiAgICAgIH1cblxuICAgICAgJjphZnRlciB7XG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZGwucm93LWZsdWlkIHtcblxuICAgICAgPiBkdCB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBAaW5jbHVkZSByZW0oJ2ZvbnQtc2l6ZScsIDE3KTtcbiAgICAgIH1cblxuICAgICAgZGQ6Zmlyc3QtY2hpbGQge1xuXG4gICAgICAgIGE6YmVmb3JlIHtcbiAgICAgICAgICBAaW5jbHVkZSByZW0oJ3BhZGRpbmctcmlnaHQnLCAxMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIi5jb21tdW5pY2F0aW9uX3ByZWZlcmVuY2VzIHtcblxuICBkbC50YWJsZS5yb3ctZmx1aWQge1xuXG4gICAgPiBkdCB7XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIG1pbi13aWR0aDogMTAwJTtcblxuICAgICAgZm9udC1mYW1pbHk6ICRmb250X25vcm1hbDtcbiAgICAgIEBpbmNsdWRlIHJlbSgncGFkZGluZy1yaWdodCcsIDIyKTtcbiAgICB9XG5cbiAgICA+IGRkIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgfVxuICB9XG5cbiAgc3Bhbi5pY29uLXF1ZXN0aW9ubWFyayB7XG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgIGZvbnQtZmFtaWx5OiAkZm9udF9pY29ucztcbiAgICBAaW5jbHVkZSByZW0oJ2ZvbnQtc2l6ZScsIDE2KTtcbiAgICBjb2xvcjogJGRhcmtfYmx1ZTtcbiAgfVxuXG4gIHNwYW5bdG9vbHRpcF0ge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgcmlnaHQ6IDA7XG5cbiAgICBAaW5jbHVkZSByZW0oJ3dpZHRoJywgMjApO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICAgICY6YmVmb3JlIHtcbiAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICAgIG9wYWNpdHk6IDA7XG5cbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIEBpbmNsdWRlIHJlbSgndG9wJywgMTUpO1xuICAgICAgbGVmdDogMCU7XG5cbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgd2lkdGg6IDA7XG4gICAgICBoZWlnaHQ6IDA7XG5cbiAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgICAgIEBpbmNsdWRlIHJlbSgnYm9yZGVyLXdpZHRoJywgMTApO1xuICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAkc2xpZ2h0bHlfbGlnaHRlcl9ibHVlIHRyYW5zcGFyZW50O1xuXG4gICAgICB0cmFuc2l0aW9uOiAuMXMgYWxsIC4zcztcbiAgICB9XG5cbiAgICAmOmFmdGVyIHtcbiAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICAgIG9wYWNpdHk6IDA7XG5cbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIEBpbmNsdWRlIHJlbSgndG9wJywgMTUrMThweCk7XG4gICAgICBAaW5jbHVkZSByZW0oJ3JpZ2h0JywgLTEwKTtcblxuICAgICAgZm9udC1mYW1pbHk6ICRmb250X2xpZ2h0O1xuICAgICAgY29udGVudDogYXR0cih0b29sdGlwKTtcblxuICAgICAgZm9udC1zaXplOiAkc21hbGw7XG4gICAgICBjb2xvcjogJGJsYWNrO1xuICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICAgIEBpbmNsdWRlIHJlbSgncGFkZGluZycsIDEyKTtcblxuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICB3aWR0aDogMzAwcHg7XG5cbiAgICAgIHotaW5kZXg6IDU7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2xpZ2h0bHlfbGlnaHRlcl9ibHVlO1xuICAgICAgQGluY2x1ZGUgcmVtKCdib3JkZXItcmFkaXVzJywgJGZyYW1lX2JvcmRlcl9yYWRpdXMpO1xuXG4gICAgICB0cmFuc2l0aW9uOiAuMXMgYWxsIC4zcztcbiAgICB9XG5cbiAgICAmOmhvdmVyOmJlZm9yZSxcbiAgICAmOmhvdmVyOmFmdGVyIHtcbiAgICAgIHZpc2liaWxpdHk6IHZpc2libGU7XG4gICAgICBvcGFjaXR5OiAxO1xuICAgICAgdHJhbnNpdGlvbjogLjFzIGFsbCAwcztcbiAgICB9XG4gIH1cblxuICBsYWJlbC5jaGVja2JveCB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgQGluY2x1ZGUgcmVtKCdtYXJnaW4tYm90dG9tJywgMTApO1xuXG4gICAgLy8gQW5vdGhlciBidWxsc2hpdCBmaXhlclxuICAgID4gaW5wdXRbdHlwZT0nY2hlY2tib3gnXSArIHNwYW4uY2hlY2tib3gge1xuICAgICAgdG9wOiAwO1xuICAgICAgbGVmdDogMDtcbiAgICB9XG4gIH1cblxuICBidXR0b24uZWRpdC5yaWdodCB7XG4gICAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7XG4gIH1cbn1cblxuXG4vLyBcbi8vIE1lZGlhIHF1ZXJpZXNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbkBpbmNsdWRlIGJyZWFrcG9pbnQoJGJyay10YWJsZXQpIHtcblxuICAuY29tbXVuaWNhdGlvbl9wcmVmZXJlbmNlcyB7XG5cbiAgICBkbC50YWJsZS5yb3ctZmx1aWQge1xuXG4gICAgICA+IGR0LCA+IGRkIHtcbiAgICAgICAgZGlzcGxheTogdGFibGUtY2VsbDtcbiAgICAgICAgbWluLXdpZHRoOiBpbmhlcml0O1xuXG4gICAgICAgICYudG9wIHNwYW5bdG9vbHRpcF0ge1xuICAgICAgICAgIHRvcDogMDtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAwO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgID4gZGQge1xuICAgICAgICBAaW5jbHVkZSByZW0oJ3BhZGRpbmctbGVmdCcsIDE2KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzcGFuW3Rvb2x0aXBdIHtcbiAgICAgIHRvcDogNTAlO1xuICAgICAgQGluY2x1ZGUgcmVtKCdtYXJnaW4tdG9wJywgLTEyLjVweCk7XG5cbiAgICAgICY6YmVmb3JlIHtcbiAgICAgICAgdG9wOiAxNXB4O1xuICAgICAgICBsZWZ0OiAwJTtcbiAgICAgIH1cblxuICAgICAgJjphZnRlciB7XG4gICAgICAgIGxlZnQ6IC0xNTBweDtcbiAgICAgICAgdG9wOiAxNSsxOHB4O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiLnVzZXJfZGV0YWlsX3dpZGdldCB7XG4gIC8vIERlZmF1bHQgZGlzcGxheS4gSW4gc2VjdGlvbiBsb2dpYyBiZWxvdyB0aGVyZSBpcyB0aGUgc3dpdGNoIGZvciBkaXNwbGF5XG4gIGRpc3BsYXk6IG5vbmU7XG4gIGZsb2F0OiByaWdodDtcbiAgei1pbmRleDogMDtcblxuICAuaW5wbGFjZSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBmbG9hdDogcmlnaHQ7XG4gICAgbWFyZ2luOiAwO1xuICAgIGhlaWdodDogMzZweDtcbiAgICAuYnRuLWxvZ2luLWxvZ2dlZGluIHtcbiAgICAgIHotaW5kZXg6IDI7XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICB0b3A6IDBweDtcbiAgICAgIHJpZ2h0OiAwcHg7XG4gICAgfVxuICB9XG5cbiAgPiAudGV4dCB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuXG4gIGxhYmVsIHtcbiAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICB9XG4gIGlucHV0I1VEV19kZF9zaG93IHtcbiAgICBkaXNwbGF5OiBub25lO1xuICAgICY6Y2hlY2tlZCB7XG4gICAgICB+LmRyb3Bkb3duIHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICB9XG4gICAgICB+LmJ0bi1sb2dpbi1sb2dnZWRpbjphZnRlciB7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDE4MGRlZylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAuZHJvcGRvd24ge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgei1pbmRleDogMTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiBhdXRvO1xuICAgIHJpZ2h0OiAwO1xuICAgIEBpbmNsdWRlIHJlbSgnbWFyZ2luLXRvcCcsIC0xKTtcbiAgICBAaW5jbHVkZSByZW0oJ3dpZHRoJywgMjgwKTtcbiAgICBAaW5jbHVkZSByZW0oJ2JvcmRlci1yYWRpdXMnLCAyKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkd2hpdGU7XG4gICAgYm9yZGVyOiAxcHggc29saWQgJHNsaWdodGx5X2Rhcmtlcl9ncmV5O1xuICAgIGJveC1zaGFkb3c6IDAgMXB4IDBweCByZ2JhKDAsMCwwLDAuMyk7XG5cbiAgICAudGV4dCB7XG4gICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgICAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcbiAgICAgIHRleHQtb3ZlcmZsb3c6IGluaXRpYWw7XG4gICAgICBvdmVyZmxvdzogaW5pdGlhbDtcblxuICAgICAgcCB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBAaW5jbHVkZSByZW0oJ3BhZGRpbmcnLCAwLCAxMik7XG4gICAgICAgIEBpbmNsdWRlIHJlbSgnbWFyZ2luJywgMTgsIDApO1xuICAgICAgfVxuXG4gICAgICBwLm5hbWUge1xuICAgICAgICBAaW5jbHVkZSByZW0oJ3BhZGRpbmcnLCAwLCAyMCk7XG4gICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICAgIGNvbG9yOiAkZ3JlZW47XG5cbiAgICAgICAgJjpiZWZvcmUge1xuICAgICAgICAgIGNvbnRlbnQ6ICRmb250X2ljb25zX21hbjtcbiAgICAgICAgICBmb250LWZhbWlseTogJGZvbnRfaWNvbnM7XG4gICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgIEBpbmNsdWRlIHJlbSgnZm9udC1zaXplJywgMjMpO1xuICAgICAgICAgIEBpbmNsdWRlIHJlbSgnbWFyZ2luLXJpZ2h0JywgMTIpO1xuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgzcHgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC5hY3Rpb24ge1xuICAgICAgICBAaW5jbHVkZSByZW0oJ3BhZGRpbmcnLCAwLCAxMik7XG4gICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLmhpZ2hsaWdodCB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgJi5oYXMtYmVlbi1zaG93biB7IC8vaWYgdXNlciBoYXMgYWxyZWFkeSBzZWVuIHRoZSBoaWdobGlnaHQsIHdlIGRvbid0IHdhbnQgdG8gc2hvdyB0aGlzIGFnYWluXG4gICAgICAmLmRlc2t0b3AsICYubW9iaWxlIHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIH1cbiAgICB9XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGdyZWVuO1xuXG4gICAgJi5kZXNrdG9wIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB0b3A6IDA7XG4gICAgICByaWdodDogMDtcbiAgICAgIGJvdHRvbTogMDtcbiAgICAgIGxlZnQ6IDA7XG4gICAgICB6LWluZGV4OiAwO1xuICAgICAgQGluY2x1ZGUgcmVtKCdwYWRkaW5nJywgMjMsIDApO1xuICAgICAgYW5pbWF0aW9uOiBzbGlkaW5nSGlnaGxpZ2h0T25Ub3AgMXMgMSAzcyBmb3J3YXJkcztcbiAgICB9XG5cbiAgICAmLm1vYmlsZSB7XG4gICAgICAvL2Rpc3BsYXk6IG5vbmU7XG4gICAgICBAaW5jbHVkZSByZW0oJ2ZvbnQtc2l6ZScsIDE2KTtcbiAgICAgIEBpbmNsdWRlIHJlbSgnbWFyZ2luJywgMCwgMTIpO1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgYW5pbWF0aW9uOiBzbGlkaW5nSGlnaGxpZ2h0T25Ub3BNb2JpbGUgMXMgMSAzcyBmb3J3YXJkcztcbiAgICAgIG1heC1oZWlnaHQ6IDUwMHB4O1xuXG4gICAgICAudGV4dCB7XG4gICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRncmVlbjtcblxuICAgICAgICBwIHtcbiAgICAgICAgICBAaW5jbHVkZSByZW0oJ3BhZGRpbmcnLCAxMik7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgICAgICAgICBjb2xvcjogJHdoaXRlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3Ryb25nIHtcbiAgICAgIGZvbnQtZmFtaWx5OiAkZm9udF9ub3JtYWw7XG4gICAgICBmb250LXdlaWdodDogMzAwO1xuICAgIH1cbiAgfVxuXG4gIC5idG4tbG9naW4tbG9nZ2VkaW4ge1xuICAgIEBpbmNsdWRlIHJlbSgncGFkZGluZycsIDAsIDEwLCAxLCAxMCk7XG4gICAgQGluY2x1ZGUgcmVtKCdsaW5lLWhlaWdodCcsIDM2KTtcbiAgICBoZWlnaHQ6IGF1dG87XG4gICAgcGFkZGluZy1ib3R0b206IDZweDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgQGluY2x1ZGUgcmVtKCdib3JkZXItcmFkaXVzJywgMik7XG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgb3V0bGluZTogMDtcblxuICAgIGZvbnQtZmFtaWx5OiAkZm9udF9ub3JtYWw7XG4gICAgQGluY2x1ZGUgcmVtKCdmb250LXNpemUnLCAxNik7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHdoaXRlO1xuICAgIGJvcmRlci13aWR0aDogMXB4O1xuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG5cbiAgICAvLyBQcm9wZXJ0aWVzIGZvciBhbmltYXRpb25cbiAgICBib3JkZXItY29sb3I6ICRzbGlnaHRseV9kYXJrZXJfZ3JleTtcbiAgICBib3JkZXItYm90dG9tLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICBjb2xvcjogJGdyZWVuO1xuXG4gICAgJjphZnRlciB7XG4gICAgICBmb250LWZhbWlseTogJGZvbnRfaWNvbnM7XG4gICAgICBAaW5jbHVkZSByZW0oJ2ZvbnQtc2l6ZScsIDEyKTtcbiAgICAgIC8vZGlzcGxheTogbm9uZTtcbiAgICAgIGNvbnRlbnQ6ICRmb250X2ljb25zX2Fycm93X2Rvd247XG4gICAgICBAaW5jbHVkZSByZW0oJ21hcmdpbi1sZWZ0JywgNik7XG4gICAgICAvL2JvcmRlcjogMCBzb2xpZCAkZ3JlZW47XG4gICAgICAvL0BpbmNsdWRlIHJlbSgnd2lkdGgnLCA4KTtcbiAgICAgIC8vQGluY2x1ZGUgcmVtKCdoZWlnaHQnLCA4KTtcbiAgICAgIC8vQGluY2x1ZGUgcmVtKCdib3JkZXItd2lkdGgnLCAzKTtcbiAgICAgIC8vQGluY2x1ZGUgcmVtKCdtYXJnaW4tbGVmdCcsIDEyKTtcbiAgICAgIC8vYm9yZGVyLXRvcC1zdHlsZTogbm9uZTtcbiAgICAgIC8vYm9yZGVyLWxlZnQtc3R5bGU6IG5vbmU7XG4gICAgICAvL3RyYW5zZm9ybTogdHJhbnNsYXRlWSgtM3B4KSByb3RhdGUoNDVkZWcpO1xuICAgIH1cblxuICAgICYudGFwIHtcbiAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6ICRzbGlnaHRseV9kYXJrZXJfZ3JleTtcbiAgICAgIHBhZGRpbmctYm90dG9tOiAwO1xuXG4gICAgICAmIH4gLmRyb3Bkb3duIHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAmLm9mZixcbiAgICAmLm9mZjphZnRlciB7XG4gICAgICBhbmltYXRpb246IG5vbmU7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkd2hpdGU7XG4gICAgfVxuXG4gICAgJjpob3ZlciB7XG4gICAgICBvcGFjaXR5OiBpbml0aWFsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFbmQgYW5pbWF0aW9uIHdpdGggalF1ZXJ5IHN1cHBvcnRcbiAgICovXG4gICYucHJvY2Vzc2VkIHtcblxuICAgIC5oaWdobGlnaHQuZGVza3RvcCB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cblxuICAgIC5oaWdobGlnaHQubW9iaWxlIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuXG4gICAgPiAudGV4dCB7XG4gICAgICBvcGFjaXR5OiAxO1xuICAgIH1cblxuICAgIC5idG4tbG9naW4tbG9nZ2VkaW4sXG4gICAgLmJ0bi1sb2dpbi1sb2dnZWRpbjphZnRlciB7XG4gICAgICBhbmltYXRpb246IG5vbmU7XG4gICAgfVxuICB9XG59XG5cbi8vXG4vLyBGaXhlcyBmb3IgSUU8MTBcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmh0bWwubHQtaWU5IC51c2VyX2RldGFpbF93aWRnZXQgPiAudGV4dCB7XG4gIG9wYWNpdHk6IDEgIWltcG9ydGFudDtcbn1cblxuXG4vL1xuLy8gTG9naWNzIGJhc2VkIG9uIHRoZSBzZWN0aW9uIGFuZCBzdGF0dXNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmJvZHkuc2VjdGlvbi1taWpuYWVnb24gLm15YWVnb24ge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG5ib2R5LnNody13aWRnZXRzLWxvZ2dlZC1pbiB7XG5cbiAgaGVhZGVyLmhlYWRlciAubG9naW4tbGluay13cmFwcGVyLFxuICAubGluay1sb2dnZWQtaW4gYSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuXG4gIC51c2VyX2RldGFpbF93aWRnZXQsXG4gIC5saW5rLWxvZ2dlZC1pbiAubGluay1hbHRlcm5hdGl2ZSBhIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgfVxufVxuXG4ubGluay1hbHRlcm5hdGl2ZSBhIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuXG4vL1xuLy8gTWVkaWEgcXVlcmllc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuQGluY2x1ZGUgYnJlYWtwb2ludCgkYnJrLXRhYmxldCkge1xuXG4gIC51c2VyX2RldGFpbF93aWRnZXQge1xuXG4gICAgPiAudGV4dCB7XG4gICAgICBAaW5jbHVkZSByZW0oJ2xpbmUtaGVpZ2h0JywgNDQpO1xuICAgIH1cblxuICAgIC50ZXh0IHtcblxuICAgICAgcC5uYW1lIHtcbiAgICAgICAgZGlzcGxheTogaW5saW5lO1xuICAgICAgICBAaW5jbHVkZSByZW0oJ3BhZGRpbmcnLCAwLCAyNSwgMCwgMCk7XG5cbiAgICAgICAgY29sb3I6ICRncmVlbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAuZHJvcGRvd24ge1xuICAgICAgZGlzcGxheTogbm9uZTtcblxuICAgICAgLnRleHQgcC5uYW1lIHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAuaGlnaGxpZ2h0LmRlc2t0b3Age1xuICAgICAgZGlzcGxheTogYmxvY2s7XG5cbiAgICAgIC50ZXh0IHtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgICAgICBAaW5jbHVkZSByZW0oJ2xpbmUtaGVpZ2h0JywgNDQpO1xuICAgICAgICBAaW5jbHVkZSByZW0oJ3BhZGRpbmctcmlnaHQnLCAxNzApO1xuICAgICAgICBtYXJnaW4tbGVmdDogNy4zJTtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiA3LjMlO1xuXG4gICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuXG4gICAgICAgIGNvbG9yOiAkd2hpdGU7XG5cbiAgICAgICAgLndlbGNvbWUge1xuICAgICAgICAgIGZvbnQtZmFtaWx5OiAkZm9udF9ub3JtYWw7XG4gICAgICAgIH1cblxuICAgICAgICBwIHtcbiAgICAgICAgICBkaXNwbGF5OiBpbmxpbmU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAuaGlnaGxpZ2h0Lm1vYmlsZSB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cblxuICAgIC5idG4tbG9naW4tbG9nZ2VkaW4ge1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgQGluY2x1ZGUgcmVtKCdwYWRkaW5nJywgMCwgMTMsIDIsIDEzKTtcbiAgICAgIEBpbmNsdWRlIHJlbSgnbGluZS1oZWlnaHQnLCAzNik7XG4gICAgICBmb250LXNpemU6IGluaGVyaXQ7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6ICRzbGlnaHRseV9kYXJrZXJfZ3JleTtcbiAgICAgIGFuaW1hdGlvbjogYnV0dG9uTG9naW5Ub0RlZmF1bHQgNHMgbm9ybWFsIDBzIGZvcndhcmRzO1xuXG4gICAgICAmOmJlZm9yZSB7XG4gICAgICAgIGNvbnRlbnQ6ICdcXGU2MzYnO1xuICAgICAgICBmb250LWZhbWlseTogJ2FlZ29uX2ljb25zJztcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICBAaW5jbHVkZSByZW0oJ2ZvbnQtc2l6ZScsIDIzKTtcbiAgICAgICAgQGluY2x1ZGUgcmVtKCdtYXJnaW4tcmlnaHQnLCAxMik7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgzcHgpO1xuICAgICAgfVxuXG4gICAgICAmOmFmdGVyIHtcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICBhbmltYXRpb246IGJ1dHRvbkFmdGVyTG9naW5Ub0RlZmF1bHQgNHMgbm9ybWFsIDBzIGZvcndhcmRzO1xuICAgICAgfVxuXG4gICAgICAmLnRhcCB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR3aGl0ZTtcbiAgICAgICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAwcHg7XG5cbiAgICAgICAgfiAuZHJvcGRvd24ge1xuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICYuaWVDaGFuZ2VDb2xvcnMge1xuICAgICAgICBjb2xvcjogJHdoaXRlO1xuXG4gICAgICAgICY6YWZ0ZXIge1xuICAgICAgICAgIGJvcmRlci1jb2xvcjogJHdoaXRlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbkBpbmNsdWRlIGJyZWFrcG9pbnQoJGJyay1pcGFkLXBvcnRyYWl0KSB7XG5cbiAgLnVzZXJfZGV0YWlsX3dpZGdldCB7XG5cbiAgICA+IC50ZXh0IHtcbiAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXG4gICAgICAvLyBEZWZhdWx0IHN0YXR1c1xuICAgICAgb3BhY2l0eTogMTtcbiAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgLjE1cztcbiAgICB9XG4gIH1cbn1cblxuXG4vL1xuLy8gQW5pbWF0aW9uXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5Aa2V5ZnJhbWVzIGJ1dHRvbkxvZ2luVG9EZWZhdWx0IHtcbiAgMCUsIDc1JSB7XG4gICAgYm9yZGVyLWNvbG9yOiAkd2hpdGU7XG4gICAgY29sb3I6ICR3aGl0ZTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIGJvcmRlci1jb2xvcjogJHNsaWdodGx5X2Rhcmtlcl9ncmV5O1xuICAgIGNvbG9yOiAkZ3JlZW47XG4gIH1cbn1cblxuQGtleWZyYW1lcyBidXR0b25BZnRlckxvZ2luVG9EZWZhdWx0IHtcbiAgMCUsIDc1JSB7XG4gICAgYm9yZGVyLWNvbG9yOiAkd2hpdGU7XG4gIH1cblxuICAxMDAlIHtcbiAgICBib3JkZXItY29sb3I6ICRncmVlbjtcbiAgfVxufVxuXG5Aa2V5ZnJhbWVzIHNsaWRpbmdIaWdobGlnaHRPblRvcCB7XG4gIGZyb20ge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwJSk7XG4gIH1cblxuICB0byB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMjAlKTtcbiAgfVxufVxuXG5Aa2V5ZnJhbWVzIHNsaWRpbmdIaWdobGlnaHRPblRvcE1vYmlsZSB7XG4gIGZyb20ge1xuICAgIG1heC1oZWlnaHQ6IDUwMHB4O1xuICB9XG5cbiAgdG8ge1xuICAgIG1heC1oZWlnaHQ6IDBweDtcbiAgfVxufVxuIiwiLy9cbi8vIEV4dHJhIGZlYXR1cmVzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cbi8vIEhpbnQ6XG4vLyBVc2Ugb25seSB0aGlzIC5oaWRlLWlmLXNody1sb2dnZWRvdXQgaWYgbmVjZXNzYXJ5IGFuZCBsZXQgYWxsIGVsZW1lbnRzIFxuLy8gdmlzaWJsZSBieSBkZWZhdWx0LlxuLmhpZGUtaWYtc2h3LWxvZ2dlZG91dCB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi8vIEhpZGUvc2hvdyBhbnkgZWxlbWVudHMgYmFzZWQgb24gY3VycmVudCB1c2VyIHN0YXR1c1xuLnNody13aWRnZXRzLWxvZ2dlZC1pbiB7XG5cbiAgLy8gQmVsb3cgaSdtIHVzaW5nIGRpZmZlcmVudCB0eXBlIG9mIGRpc3BsYXksIHRvIHJlc3RvcmUgdGhlIGluaXRpYWwgYmVoYXZpb3VyXG4gIC8vIGFuZCBvdmVyd3JpdGUgdGhlIHByZXZpb3VzIFwibm9uZVwiIHNldCBieSAuaGlkZS1pZi1zaHctbG9nZ2VkaW5cbiAgLy8gRXhhbXBsZTpcbiAgLy8gLnNob3ctaWYtc2h3LWxvZ2dlZGluIC0+IHNob3cgYXMgaW5saW5lIGJ5IGRlZmF1bHRcbiAgLy8gLnNob3ctaWYtc2h3LWxvZ2dlZGluLmJsb2NrIC0+IHNob3cgYXMgYmxvY2tcbiAgLy8gLnNob3ctaWYtc2h3LWxvZ2dlZGluLmlubGluZSAtPiBzaG93IGFzIGlubGluZVxuICAvLyAuc2hvdy1pZi1zaHctbG9nZ2VkaW4uaW5saW5lLWJsb2NrIC0+IHNob3cgYXMgaW5saW5lLWJsb2NrXG4gIC5zaG93LWlmLXNody1sb2dnZWRpbixcbiAgLmhpZGUtaWYtc2h3LWxvZ2dlZG91dCB7XG4gICAgZGlzcGxheTogaW5saW5lO1xuXG4gICAgJi5pbmxpbmUge1xuICAgICAgZGlzcGxheTogaW5saW5lO1xuICAgIH1cblxuICAgICYuaW5saW5lLWJsb2NrIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB9XG5cbiAgICAmLmJsb2NrIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZGl0aW9uYWwgY2xhc3MgdG8gaGlkZSBpZiBzaHcgd2lkZ2V0IGlzIGxvZ2dlZCBpblxuICAuaGlkZS1pZi1zaHctbG9nZ2VkaW4ge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbn0iLCJcbi8vXG4vLyBCYXNlIGZpbGVcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblxuLy8gVEVNUDogaGlkZSBzbGlkaW5nIGNvb2tpZSBwb3B1cFxuLnNsaWRpbmctcG9wdXAtdG9wIHtcbiAgZGlzcGxheTogbm9uZTtcbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0= */
>>>>>>> 0d7d7963380d421c2aeda6a583d533486b02f2a3
